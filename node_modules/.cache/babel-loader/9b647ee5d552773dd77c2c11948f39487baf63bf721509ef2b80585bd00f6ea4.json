{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\ielts-speech-evaluator\\\\src\\\\components\\\\SpeechEvaluator.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport questionBank from \"../data/questions-corrected\";\nimport sampleAnswers from \"../data/sampleAnswers\";\nimport './SpeechEvaluator.css';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\nimport jsPDF from 'jspdf';\n\n// Register chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\n\n// Create IELTS test question structure (existing code)\nconst createIELTSTest = () => {\n  // ... your existing createIELTSTest function code ...\n};\n\n// Simple Pronunciation Analyzer class (existing code)\nclass SimplePronunciationAnalyzer {\n  // ... your existing class code ...\n}\n\n// Utility to get band color\nconst getBandColor = band => {\n  if (band >= 8.5) return \"#2e7d32\";\n  if (band >= 7) return \"#388e3c\";\n  if (band >= 6.5) return \"#689f38\";\n  if (band >= 6) return \"#afb42b\";\n  if (band >= 5.5) return \"#f57f17\";\n  if (band >= 5) return \"#ff8f00\";\n  if (band >= 4) return \"#d32f2f\";\n  return \"#d32f2f\";\n};\nfunction SpeechEvaluator() {\n  _s();\n  var _currentTest$allQuest;\n  // State declarations\n  const [currentTest, setCurrentTest] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [currentPart, setCurrentPart] = useState(1);\n  const [answers, setAnswers] = useState([]);\n  const [recording, setRecording] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [feedbacks, setFeedbacks] = useState(null);\n  const [testSummary, setTestSummary] = useState(null);\n  const [error, setError] = useState(null);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const [preparationTime, setPreparationTime] = useState(0);\n  const [isPreparingPart2, setIsPreparingPart2] = useState(false);\n  const [preparationNotes, setPreparationNotes] = useState(\"\");\n  const [autoStartRecording, setAutoStartRecording] = useState(false);\n  const [isComponentReady, setIsComponentReady] = useState(false);\n  const [initializationError, setInitializationError] = useState(null);\n  const [pronunciationAnalyzer, setPronunciationAnalyzer] = useState(null);\n  const [audioFeatures, setAudioFeatures] = useState({});\n  const [isAnalyzingPronunciation, setIsAnalyzingPronunciation] = useState(false);\n\n  // Refs\n  const recognitionRef = useRef(null);\n  const recordingTimerRef = useRef(null);\n  const preparationTimerRef = useRef(null);\n  const currentStreamRef = useRef(null);\n\n  // Initialize component and test\n  useEffect(() => {\n    const initializeComponent = async () => {\n      try {\n        const test = createIELTSTest();\n        setCurrentTest(test);\n        setAnswers(Array(test.totalQuestions).fill(\"\"));\n        const analyzer = new SimplePronunciationAnalyzer();\n        setPronunciationAnalyzer(analyzer);\n        setIsComponentReady(true);\n        setInitializationError(null);\n      } catch (error) {\n        console.error('Component initialization failed:', error);\n        setInitializationError('Failed to initialize speech evaluator. Please refresh the page.');\n        setIsComponentReady(true);\n      }\n    };\n    initializeComponent();\n  }, []);\n\n  // Cleanup audio and timers on unmount\n  useEffect(() => {\n    return () => {\n      if (recordingTimerRef.current) clearInterval(recordingTimerRef.current);\n      if (preparationTimerRef.current) clearInterval(preparationTimerRef.current);\n      if (currentStreamRef.current) {\n        currentStreamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (pronunciationAnalyzer) {\n        pronunciationAnalyzer.stopAnalysis();\n      }\n    };\n  }, [pronunciationAnalyzer]);\n\n  // Auto start recording after preparation timer ends\n  useEffect(() => {\n    if (autoStartRecording && !isPreparingPart2 && preparationTime === 0) {\n      const autoStartTimeout = setTimeout(() => {\n        startRecording();\n        setAutoStartRecording(false);\n      }, 500);\n      return () => clearTimeout(autoStartTimeout);\n    }\n  }, [autoStartRecording, isPreparingPart2, preparationTime]);\n\n  // Timer functions: start/stop recording timer\n  const startRecordingTimer = useCallback(() => {\n    setRecordingTime(0);\n    recordingTimerRef.current = setInterval(() => {\n      setRecordingTime(prev => prev + 1);\n    }, 1000);\n  }, []);\n  const stopRecordingTimer = useCallback(() => {\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n      recordingTimerRef.current = null;\n    }\n  }, []);\n\n  // Preparation timer (1 min) with auto-start flag\n  const startPreparationTimer = useCallback(() => {\n    setPreparationTime(60);\n    setAutoStartRecording(true);\n    preparationTimerRef.current = setInterval(() => {\n      setPreparationTime(prev => {\n        if (prev <= 1) {\n          clearInterval(preparationTimerRef.current);\n          setIsPreparingPart2(false);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  }, []);\n  const formatTime = useCallback(seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n\n  // Determine current part from question index\n  const getCurrentPartInfo = () => {\n    if (!currentTest) return null;\n    const part1Length = currentTest.testStructure.part1.questions.length;\n    const part2Index = part1Length;\n    if (currentQuestionIndex < part1Length) {\n      return {\n        part: 1,\n        info: currentTest.testStructure.part1\n      };\n    } else if (currentQuestionIndex === part2Index) {\n      return {\n        part: 2,\n        info: currentTest.testStructure.part2\n      };\n    } else {\n      return {\n        part: 3,\n        info: currentTest.testStructure.part3\n      };\n    }\n  };\n\n  // Start Part 2 preparation\n  const startPart2Preparation = () => {\n    setIsPreparingPart2(true);\n    setPreparationNotes(\"\");\n    startPreparationTimer();\n  };\n\n  // Start recording logic\n  const startRecording = async () => {\n    if (pronunciationAnalyzer && !pronunciationAnalyzer.audioContext) {\n      try {\n        await pronunciationAnalyzer.initialize();\n      } catch (error) {\n        console.warn('AudioContext initialization error:', error);\n      }\n    }\n    if (!(\"webkitSpeechRecognition\" in window) && !(\"SpeechRecognition\" in window)) {\n      setError(\"Speech recognition is not supported in this browser. Please use Chrome or Edge.\");\n      return;\n    }\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: false\n        }\n      });\n      currentStreamRef.current = stream;\n      if (pronunciationAnalyzer && pronunciationAnalyzer.audioContext) {\n        try {\n          pronunciationAnalyzer.reset();\n          await pronunciationAnalyzer.startAnalysis(stream);\n          setIsAnalyzingPronunciation(true);\n        } catch (analysisError) {\n          console.warn('Pronunciation analysis failed:', analysisError);\n        }\n      }\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      recognition.lang = \"en-US\";\n      recognition.continuous = true;\n      recognition.interimResults = false;\n      recognition.onstart = () => {\n        setRecording(true);\n        setError(null);\n        startRecordingTimer();\n      };\n      recognition.onresult = event => {\n        const speechText = Array.from(event.results).map(result => result[0].transcript).join(\" \");\n        setAnswers(prev => {\n          const newAnswers = [...prev];\n          newAnswers[currentQuestionIndex] = speechText.trim();\n          return newAnswers;\n        });\n      };\n      recognition.onend = () => {\n        setRecording(false);\n        stopRecordingTimer();\n      };\n      recognition.onerror = event => {\n        setError(`Speech recognition error: ${event.error}. Please try again.`);\n        setRecording(false);\n        stopRecordingTimer();\n        setIsAnalyzingPronunciation(false);\n      };\n      recognitionRef.current = recognition;\n      recognition.start();\n    } catch (err) {\n      setError(\"Failed to access microphone. Please check permissions and try again.\");\n      console.error(\"Microphone access error:\", err);\n    }\n  };\n\n  // Stop recording logic\n  const stopRecording = () => {\n    var _recognitionRef$curre;\n    (_recognitionRef$curre = recognitionRef.current) === null || _recognitionRef$curre === void 0 ? void 0 : _recognitionRef$curre.stop();\n    if (pronunciationAnalyzer && isAnalyzingPronunciation) {\n      pronunciationAnalyzer.stopAnalysis();\n      const features = pronunciationAnalyzer.getFeatures();\n      setAudioFeatures(prev => ({\n        ...prev,\n        [currentQuestionIndex]: features\n      }));\n      setIsAnalyzingPronunciation(false);\n    }\n    if (currentStreamRef.current) {\n      currentStreamRef.current.getTracks().forEach(track => track.stop());\n    }\n    setTimeout(goNext, 1500);\n  };\n\n  // Toggle recording\n  const toggleRecording = async () => {\n    if (recording) {\n      stopRecording();\n    } else {\n      await startRecording();\n    }\n  };\n\n  // Navigation\n  const goNext = () => {\n    if (currentQuestionIndex < currentTest.totalQuestions - 1) {\n      const nextIndex = currentQuestionIndex + 1;\n      const nextPartInfo = getCurrentPartInfo();\n      if ((nextPartInfo === null || nextPartInfo === void 0 ? void 0 : nextPartInfo.part) === 2 && currentQuestionIndex + 1 === currentTest.testStructure.part1.questions.length) {\n        setCurrentPart(2);\n      } else if ((nextPartInfo === null || nextPartInfo === void 0 ? void 0 : nextPartInfo.part) === 3 && currentPart !== 3) {\n        setCurrentPart(3);\n      }\n      setCurrentQuestionIndex(nextIndex);\n    }\n  };\n  const goPrev = () => {\n    if (currentQuestionIndex > 0) {\n      const prevIndex = currentQuestionIndex - 1;\n      setCurrentQuestionIndex(prevIndex);\n      const partInfo = getCurrentPartInfo();\n      if (partInfo) {\n        setCurrentPart(partInfo.part);\n      }\n    }\n  };\n\n  // Submit test and fetch feedback & summary\n  const submitTest = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"/api/analyze-batch\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          testId: currentTest.testId,\n          questions: currentTest.allQuestions.map(q => q.prompt),\n          answers,\n          audioFeatures,\n          testType: \"IELTS_AUTHENTIC\"\n        })\n      });\n      if (!response.ok) throw new Error(`Server error: ${response.status}`);\n      const data = await response.json();\n      setFeedbacks(data.feedbacks);\n      setTestSummary(data.testSummary);\n      setShowResults(true);\n    } catch (err) {\n      console.error(\"Analysis error:\", err);\n      setError(\"Error during analysis. Please check your connection and try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset test for retake\n  const resetTest = () => {\n    const newTest = createIELTSTest();\n    setCurrentTest(newTest);\n    setAnswers(Array(newTest.totalQuestions).fill(\"\"));\n    setCurrentQuestionIndex(0);\n    setCurrentPart(1);\n    setFeedbacks(null);\n    setTestSummary(null);\n    setShowResults(false);\n    setError(null);\n    setRecordingTime(0);\n    setPreparationTime(0);\n    setIsPreparingPart2(false);\n    setPreparationNotes(\"\");\n    setAutoStartRecording(false);\n    if (pronunciationAnalyzer) pronunciationAnalyzer.reset();\n  };\n\n  // Prepare data for band chart\n  const bandData = {\n    labels: ['Part 1', 'Part 2', 'Part 3'],\n    datasets: [{\n      label: 'IELTS Bands',\n      data: [(testSummary === null || testSummary === void 0 ? void 0 : testSummary.part1Band) || 0, (testSummary === null || testSummary === void 0 ? void 0 : testSummary.part2Band) || 0, (testSummary === null || testSummary === void 0 ? void 0 : testSummary.part3Band) || 0],\n      backgroundColor: [getBandColor(testSummary === null || testSummary === void 0 ? void 0 : testSummary.part1Band), getBandColor(testSummary === null || testSummary === void 0 ? void 0 : testSummary.part2Band), getBandColor(testSummary === null || testSummary === void 0 ? void 0 : testSummary.part3Band)]\n    }]\n  };\n\n  // Export feedback & results as PDF\n  const exportPDF = () => {\n    if (!testSummary) return;\n    const doc = new jsPDF();\n    doc.setFontSize(18);\n    doc.text('IELTS Speaking Test Feedback', 10, 10);\n    doc.setFontSize(14);\n    doc.text(`Part 1 Band: ${testSummary.part1Band}`, 10, 30);\n    doc.text(`Part 2 Band: ${testSummary.part2Band}`, 10, 40);\n    doc.text(`Part 3 Band: ${testSummary.part3Band}`, 10, 50);\n    doc.text(`Overall Band: ${testSummary.overallBand}`, 10, 60);\n    if (feedbacks) {\n      let y = 80;\n      feedbacks.forEach((fb, i) => {\n        var _sampleAnswers$find;\n        doc.setFontSize(12);\n        doc.text(`Q${i + 1}: ${fb.question}`, 10, y);\n        y += 8;\n        doc.text(`Your Answer: ${fb.answer}`, 10, y);\n        y += 8;\n        doc.text(`Feedback: ${fb.feedback}`, 10, y);\n        y += 8;\n        const sample = (_sampleAnswers$find = sampleAnswers.find(s => s.question === fb.question)) === null || _sampleAnswers$find === void 0 ? void 0 : _sampleAnswers$find.sample;\n        if (sample) {\n          doc.text(`Sample Answer: ${sample}`, 10, y);\n          y += 12;\n        } else {\n          y += 4;\n        }\n        if (y > 270) {\n          doc.addPage();\n          y = 15;\n        }\n      });\n    }\n    doc.save('IELTS-Speaking-Feedback.pdf');\n  };\n  if (!isComponentReady) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: initializationError || \"Setting up authentic IELTS format with auto-recording...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Main rendering\n  const currentPartInfo = getCurrentPartInfo();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"speech-evaluator-main\",\n    children: [!showResults && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-interface\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [currentPartInfo === null || currentPartInfo === void 0 ? void 0 : currentPartInfo.info.name, \" (\", currentPartInfo === null || currentPartInfo === void 0 ? void 0 : currentPartInfo.info.duration, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: (currentPartInfo === null || currentPartInfo === void 0 ? void 0 : currentPartInfo.part) === 2 ? currentPartInfo.info.question.cueCard.mainPrompt : currentTest === null || currentTest === void 0 ? void 0 : (_currentTest$allQuest = currentTest.allQuestions[currentQuestionIndex]) === null || _currentTest$allQuest === void 0 ? void 0 : _currentTest$allQuest.prompt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleRecording,\n        children: recording ? 'Stop Recording' : 'Start Recording'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goPrev,\n        disabled: currentQuestionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goNext,\n        disabled: currentQuestionIndex >= currentTest.totalQuestions - 1,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitTest,\n        disabled: loading,\n        children: \"Submit Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 9\n    }, this), showResults && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"IELTS Speaking Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          maxWidth: 450,\n          margin: 'auto',\n          marginBottom: 25\n        },\n        children: /*#__PURE__*/_jsxDEV(Bar, {\n          data: bandData,\n          options: {\n            scales: {\n              y: {\n                min: 0,\n                max: 9,\n                ticks: {\n                  stepSize: 0.5\n                },\n                title: {\n                  display: true,\n                  text: 'Band Score'\n                }\n              }\n            },\n            plugins: {\n              legend: {\n                display: false\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"export-pdf-btn\",\n        onClick: exportPDF,\n        children: \"Export Feedback as PDF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }, this), feedbacks === null || feedbacks === void 0 ? void 0 : feedbacks.map((fb, i) => {\n        var _sampleAnswers$find2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-feedback\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"Question \", i + 1, \": \", fb.question]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Your Answer: \", fb.answer]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Feedback: \", fb.feedback]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sample-answer\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Sample Answer:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 17\n            }, this), \" \", ((_sampleAnswers$find2 = sampleAnswers.find(s => s.question === fb.question)) === null || _sampleAnswers$find2 === void 0 ? void 0 : _sampleAnswers$find2.sample) || 'Sample answer coming soon.']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetTest,\n        children: \"Retake Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 389,\n    columnNumber: 5\n  }, this);\n}\n_s(SpeechEvaluator, \"fRcd39VeN3bLnlTtmmdpz3ZMGJ4=\");\n_c = SpeechEvaluator;\nexport default SpeechEvaluator;\nvar _c;\n$RefreshReg$(_c, \"SpeechEvaluator\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","questionBank","sampleAnswers","Bar","Chart","ChartJS","BarElement","CategoryScale","LinearScale","Title","Tooltip","Legend","jsPDF","jsxDEV","_jsxDEV","register","createIELTSTest","SimplePronunciationAnalyzer","getBandColor","band","SpeechEvaluator","_s","_currentTest$allQuest","currentTest","setCurrentTest","currentQuestionIndex","setCurrentQuestionIndex","currentPart","setCurrentPart","answers","setAnswers","recording","setRecording","loading","setLoading","feedbacks","setFeedbacks","testSummary","setTestSummary","error","setError","recordingTime","setRecordingTime","showResults","setShowResults","preparationTime","setPreparationTime","isPreparingPart2","setIsPreparingPart2","preparationNotes","setPreparationNotes","autoStartRecording","setAutoStartRecording","isComponentReady","setIsComponentReady","initializationError","setInitializationError","pronunciationAnalyzer","setPronunciationAnalyzer","audioFeatures","setAudioFeatures","isAnalyzingPronunciation","setIsAnalyzingPronunciation","recognitionRef","recordingTimerRef","preparationTimerRef","currentStreamRef","initializeComponent","test","Array","totalQuestions","fill","analyzer","console","current","clearInterval","getTracks","forEach","track","stop","stopAnalysis","autoStartTimeout","setTimeout","startRecording","clearTimeout","startRecordingTimer","setInterval","prev","stopRecordingTimer","startPreparationTimer","formatTime","seconds","mins","Math","floor","secs","toString","padStart","getCurrentPartInfo","part1Length","testStructure","part1","questions","length","part2Index","part","info","part2","part3","startPart2Preparation","audioContext","initialize","warn","window","stream","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","reset","startAnalysis","analysisError","SpeechRecognition","webkitSpeechRecognition","recognition","lang","continuous","interimResults","onstart","onresult","event","speechText","from","results","map","result","transcript","join","newAnswers","trim","onend","onerror","start","err","stopRecording","_recognitionRef$curre","features","getFeatures","goNext","toggleRecording","nextIndex","nextPartInfo","goPrev","prevIndex","partInfo","submitTest","response","fetch","method","headers","body","JSON","stringify","testId","allQuestions","q","prompt","testType","ok","Error","status","data","json","resetTest","newTest","bandData","labels","datasets","label","part1Band","part2Band","part3Band","backgroundColor","exportPDF","doc","setFontSize","text","overallBand","y","fb","i","_sampleAnswers$find","question","answer","feedback","sample","find","s","addPage","save","children","fileName","_jsxFileName","lineNumber","columnNumber","currentPartInfo","className","name","duration","cueCard","mainPrompt","onClick","disabled","style","maxWidth","margin","marginBottom","options","scales","min","max","ticks","stepSize","title","display","plugins","legend","_sampleAnswers$find2","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/ielts-speech-evaluator/src/components/SpeechEvaluator.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport questionBank from \"../data/questions-corrected\";\nimport sampleAnswers from \"../data/sampleAnswers\";\nimport './SpeechEvaluator.css';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\nimport jsPDF from 'jspdf';\n\n// Register chart.js components\nChartJS.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\n\n// Create IELTS test question structure (existing code)\nconst createIELTSTest = () => {\n  // ... your existing createIELTSTest function code ...\n};\n\n// Simple Pronunciation Analyzer class (existing code)\nclass SimplePronunciationAnalyzer {\n  // ... your existing class code ...\n}\n\n// Utility to get band color\nconst getBandColor = (band) => {\n  if (band >= 8.5) return \"#2e7d32\";\n  if (band >= 7) return \"#388e3c\";\n  if (band >= 6.5) return \"#689f38\";\n  if (band >= 6) return \"#afb42b\";\n  if (band >= 5.5) return \"#f57f17\";\n  if (band >= 5) return \"#ff8f00\";\n  if (band >= 4) return \"#d32f2f\";\n  return \"#d32f2f\";\n};\n\nfunction SpeechEvaluator() {\n  // State declarations\n  const [currentTest, setCurrentTest] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [currentPart, setCurrentPart] = useState(1);\n  const [answers, setAnswers] = useState([]);\n  const [recording, setRecording] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [feedbacks, setFeedbacks] = useState(null);\n  const [testSummary, setTestSummary] = useState(null);\n  const [error, setError] = useState(null);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const [preparationTime, setPreparationTime] = useState(0);\n  const [isPreparingPart2, setIsPreparingPart2] = useState(false);\n  const [preparationNotes, setPreparationNotes] = useState(\"\");\n  const [autoStartRecording, setAutoStartRecording] = useState(false);\n  const [isComponentReady, setIsComponentReady] = useState(false);\n  const [initializationError, setInitializationError] = useState(null);\n  const [pronunciationAnalyzer, setPronunciationAnalyzer] = useState(null);\n  const [audioFeatures, setAudioFeatures] = useState({});\n  const [isAnalyzingPronunciation, setIsAnalyzingPronunciation] = useState(false);\n\n  // Refs\n  const recognitionRef = useRef(null);\n  const recordingTimerRef = useRef(null);\n  const preparationTimerRef = useRef(null);\n  const currentStreamRef = useRef(null);\n\n  // Initialize component and test\n  useEffect(() => {\n    const initializeComponent = async () => {\n      try {\n        const test = createIELTSTest();\n        setCurrentTest(test);\n        setAnswers(Array(test.totalQuestions).fill(\"\"));\n        const analyzer = new SimplePronunciationAnalyzer();\n        setPronunciationAnalyzer(analyzer);\n        setIsComponentReady(true);\n        setInitializationError(null);\n      } catch (error) {\n        console.error('Component initialization failed:', error);\n        setInitializationError('Failed to initialize speech evaluator. Please refresh the page.');\n        setIsComponentReady(true);\n      }\n    };\n    initializeComponent();\n  }, []);\n\n  // Cleanup audio and timers on unmount\n  useEffect(() => {\n    return () => {\n      if (recordingTimerRef.current) clearInterval(recordingTimerRef.current);\n      if (preparationTimerRef.current) clearInterval(preparationTimerRef.current);\n      if (currentStreamRef.current) {\n        currentStreamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (pronunciationAnalyzer) {\n        pronunciationAnalyzer.stopAnalysis();\n      }\n    };\n  }, [pronunciationAnalyzer]);\n\n  // Auto start recording after preparation timer ends\n  useEffect(() => {\n    if (autoStartRecording && !isPreparingPart2 && preparationTime === 0) {\n      const autoStartTimeout = setTimeout(() => {\n        startRecording();\n        setAutoStartRecording(false);\n      }, 500);\n      return () => clearTimeout(autoStartTimeout);\n    }\n  }, [autoStartRecording, isPreparingPart2, preparationTime]);\n\n  // Timer functions: start/stop recording timer\n  const startRecordingTimer = useCallback(() => {\n    setRecordingTime(0);\n    recordingTimerRef.current = setInterval(() => {\n      setRecordingTime(prev => prev + 1);\n    }, 1000);\n  }, []);\n  const stopRecordingTimer = useCallback(() => {\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n      recordingTimerRef.current = null;\n    }\n  }, []);\n\n  // Preparation timer (1 min) with auto-start flag\n  const startPreparationTimer = useCallback(() => {\n    setPreparationTime(60);\n    setAutoStartRecording(true);\n    preparationTimerRef.current = setInterval(() => {\n      setPreparationTime(prev => {\n        if (prev <= 1) {\n          clearInterval(preparationTimerRef.current);\n          setIsPreparingPart2(false);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  }, []);\n\n  const formatTime = useCallback((seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n\n  // Determine current part from question index\n  const getCurrentPartInfo = () => {\n    if (!currentTest) return null;\n    const part1Length = currentTest.testStructure.part1.questions.length;\n    const part2Index = part1Length;\n    if (currentQuestionIndex < part1Length) {\n      return { part: 1, info: currentTest.testStructure.part1 };\n    } else if (currentQuestionIndex === part2Index) {\n      return { part: 2, info: currentTest.testStructure.part2 };\n    } else {\n      return { part: 3, info: currentTest.testStructure.part3 };\n    }\n  };\n\n  // Start Part 2 preparation\n  const startPart2Preparation = () => {\n    setIsPreparingPart2(true);\n    setPreparationNotes(\"\");\n    startPreparationTimer();\n  };\n\n  // Start recording logic\n  const startRecording = async () => {\n    if (pronunciationAnalyzer && !pronunciationAnalyzer.audioContext) {\n      try {\n        await pronunciationAnalyzer.initialize();\n      } catch (error) {\n        console.warn('AudioContext initialization error:', error);\n      }\n    }\n    if (!(\"webkitSpeechRecognition\" in window) && !(\"SpeechRecognition\" in window)) {\n      setError(\"Speech recognition is not supported in this browser. Please use Chrome or Edge.\");\n      return;\n    }\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: { echoCancellation: true, noiseSuppression: true, autoGainControl: false } });\n      currentStreamRef.current = stream;\n      if (pronunciationAnalyzer && pronunciationAnalyzer.audioContext) {\n        try {\n          pronunciationAnalyzer.reset();\n          await pronunciationAnalyzer.startAnalysis(stream);\n          setIsAnalyzingPronunciation(true);\n        } catch (analysisError) {\n          console.warn('Pronunciation analysis failed:', analysisError);\n        }\n      }\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      recognition.lang = \"en-US\";\n      recognition.continuous = true;\n      recognition.interimResults = false;\n      recognition.onstart = () => {\n        setRecording(true);\n        setError(null);\n        startRecordingTimer();\n      };\n      recognition.onresult = (event) => {\n        const speechText = Array.from(event.results).map(result => result[0].transcript).join(\" \");\n        setAnswers(prev => {\n          const newAnswers = [...prev];\n          newAnswers[currentQuestionIndex] = speechText.trim();\n          return newAnswers;\n        });\n      };\n      recognition.onend = () => {\n        setRecording(false);\n        stopRecordingTimer();\n      };\n      recognition.onerror = (event) => {\n        setError(`Speech recognition error: ${event.error}. Please try again.`);\n        setRecording(false);\n        stopRecordingTimer();\n        setIsAnalyzingPronunciation(false);\n      };\n      recognitionRef.current = recognition;\n      recognition.start();\n    } catch (err) {\n      setError(\"Failed to access microphone. Please check permissions and try again.\");\n      console.error(\"Microphone access error:\", err);\n    }\n  };\n\n  // Stop recording logic\n  const stopRecording = () => {\n    recognitionRef.current?.stop();\n    if (pronunciationAnalyzer && isAnalyzingPronunciation) {\n      pronunciationAnalyzer.stopAnalysis();\n      const features = pronunciationAnalyzer.getFeatures();\n      setAudioFeatures(prev => ({ ...prev, [currentQuestionIndex]: features }));\n      setIsAnalyzingPronunciation(false);\n    }\n    if (currentStreamRef.current) {\n      currentStreamRef.current.getTracks().forEach(track => track.stop());\n    }\n    setTimeout(goNext, 1500);\n  };\n\n  // Toggle recording\n  const toggleRecording = async () => {\n    if (recording) {\n      stopRecording();\n    } else {\n      await startRecording();\n    }\n  };\n\n  // Navigation\n  const goNext = () => {\n    if (currentQuestionIndex < currentTest.totalQuestions - 1) {\n      const nextIndex = currentQuestionIndex + 1;\n      const nextPartInfo = getCurrentPartInfo();\n      if (nextPartInfo?.part === 2 && currentQuestionIndex + 1 === currentTest.testStructure.part1.questions.length) {\n        setCurrentPart(2);\n      } else if (nextPartInfo?.part === 3 && currentPart !== 3) {\n        setCurrentPart(3);\n      }\n      setCurrentQuestionIndex(nextIndex);\n    }\n  };\n  const goPrev = () => {\n    if (currentQuestionIndex > 0) {\n      const prevIndex = currentQuestionIndex - 1;\n      setCurrentQuestionIndex(prevIndex);\n      const partInfo = getCurrentPartInfo();\n      if (partInfo) {\n        setCurrentPart(partInfo.part);\n      }\n    }\n  };\n\n  // Submit test and fetch feedback & summary\n  const submitTest = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"/api/analyze-batch\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          testId: currentTest.testId,\n          questions: currentTest.allQuestions.map(q => q.prompt),\n          answers,\n          audioFeatures,\n          testType: \"IELTS_AUTHENTIC\"\n        }),\n      });\n      if (!response.ok) throw new Error(`Server error: ${response.status}`);\n      const data = await response.json();\n      setFeedbacks(data.feedbacks);\n      setTestSummary(data.testSummary);\n      setShowResults(true);\n    } catch (err) {\n      console.error(\"Analysis error:\", err);\n      setError(\"Error during analysis. Please check your connection and try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset test for retake\n  const resetTest = () => {\n    const newTest = createIELTSTest();\n    setCurrentTest(newTest);\n    setAnswers(Array(newTest.totalQuestions).fill(\"\"));\n    setCurrentQuestionIndex(0);\n    setCurrentPart(1);\n    setFeedbacks(null);\n    setTestSummary(null);\n    setShowResults(false);\n    setError(null);\n    setRecordingTime(0);\n    setPreparationTime(0);\n    setIsPreparingPart2(false);\n    setPreparationNotes(\"\");\n    setAutoStartRecording(false);\n    if (pronunciationAnalyzer) pronunciationAnalyzer.reset();\n  };\n\n  // Prepare data for band chart\n  const bandData = {\n    labels: ['Part 1', 'Part 2', 'Part 3'],\n    datasets: [{\n      label: 'IELTS Bands',\n      data: [\n        testSummary?.part1Band || 0,\n        testSummary?.part2Band || 0,\n        testSummary?.part3Band || 0\n      ],\n      backgroundColor: [\n        getBandColor(testSummary?.part1Band),\n        getBandColor(testSummary?.part2Band),\n        getBandColor(testSummary?.part3Band)\n      ]\n    }]\n  };\n\n  // Export feedback & results as PDF\n  const exportPDF = () => {\n    if (!testSummary) return;\n    const doc = new jsPDF();\n    doc.setFontSize(18);\n    doc.text('IELTS Speaking Test Feedback', 10, 10);\n    doc.setFontSize(14);\n    doc.text(`Part 1 Band: ${testSummary.part1Band}`, 10, 30);\n    doc.text(`Part 2 Band: ${testSummary.part2Band}`, 10, 40);\n    doc.text(`Part 3 Band: ${testSummary.part3Band}`, 10, 50);\n    doc.text(`Overall Band: ${testSummary.overallBand}`, 10, 60);\n    if (feedbacks) {\n      let y = 80;\n      feedbacks.forEach((fb, i) => {\n        doc.setFontSize(12);\n        doc.text(`Q${i + 1}: ${fb.question}`, 10, y);\n        y += 8;\n        doc.text(`Your Answer: ${fb.answer}`, 10, y);\n        y += 8;\n        doc.text(`Feedback: ${fb.feedback}`, 10, y);\n        y += 8;\n        const sample = sampleAnswers.find(s => s.question === fb.question)?.sample;\n        if (sample) {\n          doc.text(`Sample Answer: ${sample}`, 10, y);\n          y += 12;\n        } else {\n          y += 4;\n        }\n        if (y > 270) {\n          doc.addPage();\n          y = 15;\n        }\n      });\n    }\n    doc.save('IELTS-Speaking-Feedback.pdf');\n  };\n\n  if (!isComponentReady) {\n    return (\n      <div>\n        {initializationError || \"Setting up authentic IELTS format with auto-recording...\"}\n      </div>\n    );\n  }\n\n  // Main rendering\n  const currentPartInfo = getCurrentPartInfo();\n\n  return (\n    <div className=\"speech-evaluator-main\">\n      {!showResults && (\n        <div className=\"test-interface\">\n          {/* Display current question, controls, timer, recording buttons */}\n          {/* Add your existing UI and navigation here */}\n          {/* Example snippet */}\n          <h3>{currentPartInfo?.info.name} ({currentPartInfo?.info.duration})</h3>\n          <p>{currentPartInfo?.part === 2 ? currentPartInfo.info.question.cueCard.mainPrompt : currentTest?.allQuestions[currentQuestionIndex]?.prompt}</p>\n          {/* Recording controls */}\n          <button onClick={toggleRecording}>\n            {recording ? 'Stop Recording' : 'Start Recording'}\n          </button>\n          {/* Navigation */}\n          <button onClick={goPrev} disabled={currentQuestionIndex === 0}>Previous</button>\n          <button onClick={goNext} disabled={currentQuestionIndex >= currentTest.totalQuestions - 1}>Next</button>\n          <button onClick={submitTest} disabled={loading}>Submit Test</button>\n          {error && <p className=\"error\">{error}</p>}\n        </div>\n      )}\n\n      {showResults && (\n        <div className=\"results-section\">\n          <h2>IELTS Speaking Results</h2>\n\n          {/* Band Chart */}\n          <div style={{ maxWidth: 450, margin: 'auto', marginBottom: 25 }}>\n            <Bar\n              data={bandData}\n              options={{\n                scales: {\n                  y: {\n                    min: 0,\n                    max: 9,\n                    ticks: { stepSize: 0.5 },\n                    title: { display: true, text: 'Band Score' }\n                  }\n                },\n                plugins: {\n                  legend: { display: false }\n                }\n              }}\n            />\n          </div>\n\n          {/* Export PDF */}\n          <button className=\"export-pdf-btn\" onClick={exportPDF}>Export Feedback as PDF</button>\n\n          {/* Detailed question feedback with sample answers */}\n          {feedbacks?.map((fb, i) => (\n            <div key={i} className=\"question-feedback\">\n              <strong>Question {i + 1}: {fb.question}</strong>\n              <div>Your Answer: {fb.answer}</div>\n              <div>Feedback: {fb.feedback}</div>\n              <div className=\"sample-answer\">\n                <strong>Sample Answer:</strong> {sampleAnswers.find(s => s.question === fb.question)?.sample || 'Sample answer coming soon.'}\n              </div>\n            </div>\n          ))}\n\n          <button onClick={resetTest}>Retake Test</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SpeechEvaluator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}