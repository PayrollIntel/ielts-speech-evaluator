{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\ielts-speech-evaluator\\\\src\\\\components\\\\SpeechEvaluator.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport questionBank from \"../data/questions-corrected\";\nimport sampleAnswers from \"../data/sampleAnswers\";\nimport './SpeechEvaluator.css';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\nimport jsPDF from 'jspdf';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\n\n// Create IELTS Test based on questionBank\nconst createIELTSTest = () => {\n  // Build Part 1 Questions (Sample: pick two topics, 7-8 questions total)\n  const availableTopics = [...questionBank.part1Topics];\n  const shuffledTopics = availableTopics.sort(() => Math.random() - 0.5);\n  const introTopic = shuffledTopics[0];\n  const introQuestions = [...introTopic.questions].sort(() => Math.random() - 0.5).slice(0, 2);\n  const secondTopic = shuffledTopics[1];\n  const secondQuestionsCount = Math.random() > 0.5 ? 2 : 3;\n  const secondQuestions = [...secondTopic.questions].sort(() => Math.random() - 0.5).slice(0, secondQuestionsCount);\n  let part1Questions = [];\n  introQuestions.forEach(q => part1Questions.push({\n    ...q,\n    topicName: introTopic.topicName,\n    part: 1,\n    expectedDuration: 30\n  }));\n  secondQuestions.forEach(q => part1Questions.push({\n    ...q,\n    topicName: secondTopic.topicName,\n    part: 1,\n    expectedDuration: 30\n  }));\n\n  // Part 2 Cue Card\n  const cueCards = [...questionBank.part2CueCards];\n  const selectedCueCard = cueCards[Math.floor(Math.random() * cueCards.length)];\n  const part2Question = {\n    ...selectedCueCard,\n    part: 2,\n    expectedDuration: 120,\n    preparationTime: 60\n  };\n\n  // Part 3 Discussion Questions related to Part 2\n  const relatedDiscussion = questionBank.part3Discussions.find(disc => disc.relatedToPart2 === selectedCueCard.id);\n  let part3Questions = [];\n  if (relatedDiscussion) {\n    const shuffledDiscQuestions = [...relatedDiscussion.questions].sort(() => Math.random() - 0.5);\n    const numQuestions = Math.floor(Math.random() * 3) + 4; // 4-6 questions\n    part3Questions = shuffledDiscQuestions.slice(0, numQuestions).map(q => ({\n      ...q,\n      part: 3,\n      topicTheme: relatedDiscussion.topicTheme,\n      expectedDuration: 60\n    }));\n  }\n  const allQuestions = [...part1Questions.map(q => ({\n    ...q,\n    prompt: q.prompt\n  })), {\n    ...part2Question,\n    prompt: part2Question.cueCard.mainPrompt\n  }, ...part3Questions.map(q => ({\n    ...q,\n    prompt: q.prompt\n  }))];\n  const test = {\n    testId: `ielts_test_${Date.now()}`,\n    title: `IELTS Speaking Test - ${new Date().toLocaleDateString()}`,\n    testStructure: {\n      part1: {\n        name: \"Part 1: Introduction & Interview\",\n        duration: \"4-5 minutes\",\n        questions: part1Questions,\n        topics: [introTopic.topicName, secondTopic.topicName]\n      },\n      part2: {\n        name: \"Part 2: Individual Long Turn\",\n        duration: \"3-4 minutes\",\n        question: part2Question,\n        cueCard: selectedCueCard.cueCard\n      },\n      part3: {\n        name: \"Part 3: Two-way Discussion\",\n        duration: \"4-5 minutes\",\n        questions: part3Questions,\n        theme: (relatedDiscussion === null || relatedDiscussion === void 0 ? void 0 : relatedDiscussion.topicTheme) || \"General Discussion\"\n      }\n    },\n    allQuestions,\n    totalQuestions: allQuestions.length\n  };\n  console.log(\"Created IELTS test:\", test);\n  return test;\n};\n\n// Rest of components, SimplePronunciationAnalyzer, getBandColor \n// (reuse from previous full file provided)...\n\nfunction SpeechEvaluator() {\n  _s();\n  // State declarations including testSummary\n  const [currentTest, setCurrentTest] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [currentPart, setCurrentPart] = useState(1);\n  const [answers, setAnswers] = useState([]);\n  const [recording, setRecording] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [feedbacks, setFeedbacks] = useState(null);\n  const [testSummary, setTestSummary] = useState(null);\n  const [error, setError] = useState(null);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  // ... other states and refs same as before ...\n\n  useEffect(() => {\n    const initializeComponent = async () => {\n      try {\n        const test = createIELTSTest();\n        setCurrentTest(test);\n        setAnswers(Array(test.totalQuestions).fill(\"\"));\n        // Initialize other stuff like analyzer if needed\n        setIsComponentReady(true);\n      } catch (err) {\n        console.error(\"Initialization error:\", err);\n        setInitializationError(\"Failed to initialize.\");\n      }\n    };\n    initializeComponent();\n  }, []);\n\n  // Add null checks before usage...\n\n  if (!currentTest) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading test questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Continue with your existing render logic and functions here, making sure to only access currentTest after null check\n\n  // ... Full code as in previous messages with added safe checks ...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(SpeechEvaluator, \"whAWKLxFgdgEy3NMqaY17jzT8hQ=\");\n_c = SpeechEvaluator;\nexport default SpeechEvaluator;\nvar _c;\n$RefreshReg$(_c, \"SpeechEvaluator\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","questionBank","sampleAnswers","Bar","Chart","ChartJS","BarElement","CategoryScale","LinearScale","Title","Tooltip","Legend","jsPDF","jsxDEV","_jsxDEV","register","createIELTSTest","availableTopics","part1Topics","shuffledTopics","sort","Math","random","introTopic","introQuestions","questions","slice","secondTopic","secondQuestionsCount","secondQuestions","part1Questions","forEach","q","push","topicName","part","expectedDuration","cueCards","part2CueCards","selectedCueCard","floor","length","part2Question","preparationTime","relatedDiscussion","part3Discussions","find","disc","relatedToPart2","id","part3Questions","shuffledDiscQuestions","numQuestions","map","topicTheme","allQuestions","prompt","cueCard","mainPrompt","test","testId","Date","now","title","toLocaleDateString","testStructure","part1","name","duration","topics","part2","question","part3","theme","totalQuestions","console","log","SpeechEvaluator","_s","currentTest","setCurrentTest","currentQuestionIndex","setCurrentQuestionIndex","currentPart","setCurrentPart","answers","setAnswers","recording","setRecording","loading","setLoading","feedbacks","setFeedbacks","testSummary","setTestSummary","error","setError","recordingTime","setRecordingTime","showResults","setShowResults","initializeComponent","Array","fill","setIsComponentReady","err","setInitializationError","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/ielts-speech-evaluator/src/components/SpeechEvaluator.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport questionBank from \"../data/questions-corrected\";\nimport sampleAnswers from \"../data/sampleAnswers\";\nimport './SpeechEvaluator.css';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\nimport jsPDF from 'jspdf';\n\n// Register Chart.js components\nChartJS.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\n\n// Create IELTS Test based on questionBank\nconst createIELTSTest = () => {\n  // Build Part 1 Questions (Sample: pick two topics, 7-8 questions total)\n  const availableTopics = [...questionBank.part1Topics];\n  const shuffledTopics = availableTopics.sort(() => Math.random() - 0.5);\n\n  const introTopic = shuffledTopics[0];\n  const introQuestions = [...introTopic.questions].sort(() => Math.random() - 0.5).slice(0, 2);\n\n  const secondTopic = shuffledTopics[1];\n  const secondQuestionsCount = Math.random() > 0.5 ? 2 : 3;\n  const secondQuestions = [...secondTopic.questions].sort(() => Math.random() - 0.5).slice(0, secondQuestionsCount);\n\n  let part1Questions = [];\n  introQuestions.forEach(q => part1Questions.push({ ...q, topicName: introTopic.topicName, part: 1, expectedDuration: 30 }));\n  secondQuestions.forEach(q => part1Questions.push({ ...q, topicName: secondTopic.topicName, part: 1, expectedDuration: 30 }));\n\n  // Part 2 Cue Card\n  const cueCards = [...questionBank.part2CueCards];\n  const selectedCueCard = cueCards[Math.floor(Math.random() * cueCards.length)];\n  const part2Question = { ...selectedCueCard, part: 2, expectedDuration: 120, preparationTime: 60 };\n\n  // Part 3 Discussion Questions related to Part 2\n  const relatedDiscussion = questionBank.part3Discussions.find(disc => disc.relatedToPart2 === selectedCueCard.id);\n  let part3Questions = [];\n  if (relatedDiscussion) {\n    const shuffledDiscQuestions = [...relatedDiscussion.questions].sort(() => Math.random() - 0.5);\n    const numQuestions = Math.floor(Math.random() * 3) + 4; // 4-6 questions\n    part3Questions = shuffledDiscQuestions.slice(0, numQuestions)\n      .map(q => ({ ...q, part: 3, topicTheme: relatedDiscussion.topicTheme, expectedDuration: 60 }));\n  }\n\n  const allQuestions = [\n    ...part1Questions.map(q => ({ ...q, prompt: q.prompt })),\n    { ...part2Question, prompt: part2Question.cueCard.mainPrompt },\n    ...part3Questions.map(q => ({ ...q, prompt: q.prompt })),\n  ];\n\n  const test = {\n    testId: `ielts_test_${Date.now()}`,\n    title: `IELTS Speaking Test - ${new Date().toLocaleDateString()}`,\n    testStructure: {\n      part1: { name: \"Part 1: Introduction & Interview\", duration: \"4-5 minutes\", questions: part1Questions, topics: [introTopic.topicName, secondTopic.topicName] },\n      part2: { name: \"Part 2: Individual Long Turn\", duration: \"3-4 minutes\", question: part2Question, cueCard: selectedCueCard.cueCard },\n      part3: { name: \"Part 3: Two-way Discussion\", duration: \"4-5 minutes\", questions: part3Questions, theme: relatedDiscussion?.topicTheme || \"General Discussion\" }\n    },\n    allQuestions,\n    totalQuestions: allQuestions.length,\n  };\n\n  console.log(\"Created IELTS test:\", test);\n  return test;\n};\n\n// Rest of components, SimplePronunciationAnalyzer, getBandColor \n// (reuse from previous full file provided)...\n\nfunction SpeechEvaluator() {\n  // State declarations including testSummary\n  const [currentTest, setCurrentTest] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [currentPart, setCurrentPart] = useState(1);\n  const [answers, setAnswers] = useState([]);\n  const [recording, setRecording] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [feedbacks, setFeedbacks] = useState(null);\n  const [testSummary, setTestSummary] = useState(null);\n  const [error, setError] = useState(null);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  // ... other states and refs same as before ...\n\n  useEffect(() => {\n    const initializeComponent = async () => {\n      try {\n        const test = createIELTSTest();\n        setCurrentTest(test);\n        setAnswers(Array(test.totalQuestions).fill(\"\"));\n        // Initialize other stuff like analyzer if needed\n        setIsComponentReady(true);\n      } catch (err) {\n        console.error(\"Initialization error:\", err);\n        setInitializationError(\"Failed to initialize.\");\n      }\n    };\n    initializeComponent();\n  }, []);\n\n  // Add null checks before usage...\n\n  if (!currentTest) {\n    return <div>Loading test questions...</div>;\n  }\n\n  // Continue with your existing render logic and functions here, making sure to only access currentTest after null check\n\n  // ... Full code as in previous messages with added safe checks ...\n\n  return (\n    <div>\n     {/* Your UI */}\n    </div>\n  );\n}\n\nexport default SpeechEvaluator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}