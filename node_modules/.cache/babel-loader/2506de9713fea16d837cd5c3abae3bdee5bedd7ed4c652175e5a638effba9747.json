{"ast":null,"code":"import _objectSpread from\"C:/Users/Lenovo/Desktop/IELTS Speaking/ielts-speech-evaluator v0.2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Enhanced SpeechEvaluator.jsx - Auto-Start Recording after Part 2 Preparation\n// Part 1: 7-8 questions from 2-3 topics, Part 2: 1 cue card (auto-record), Part 3: 4-6 discussion questions\nimport React,{useState,useRef,useEffect,useCallback}from\"react\";import questionBank from\"../data/questions-corrected\";import'./SpeechEvaluator.css';import{PieChart,Pie,Cell,Tooltip,Legend,ResponsiveContainer}from\"recharts\";// Function to create authentic IELTS test structure (same as before)\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const createIELTSTest=()=>{// PART 1: Select 2-3 topics and get 7-8 questions total\nconst availableTopics=[...questionBank.part1Topics];const shuffledTopics=availableTopics.sort(()=>Math.random()-0.5);// First topic: 3-4 questions (mandatory introductory topic)\nconst introTopic=shuffledTopics[0];const introQuestions=[...introTopic.questions].sort(()=>Math.random()-0.5).slice(0,2);// Second topic: 3-4 questions\nconst secondTopic=shuffledTopics[1];const secondQuestions=[...secondTopic.questions].sort(()=>Math.random()-0.5).slice(0,Math.random()>0.5?2:3);// Build Part 1 questions (7-8 total)\nlet part1Questions=[];// Add questions from first topic\nintroQuestions.forEach(q=>{part1Questions.push(_objectSpread(_objectSpread({},q),{},{topicName:introTopic.topicName,part:1,expectedDuration:30// 20-30 seconds per answer\n}));});// Add questions from second topic\nsecondQuestions.forEach(q=>{part1Questions.push(_objectSpread(_objectSpread({},q),{},{topicName:secondTopic.topicName,part:1,expectedDuration:30}));});// PART 2: Select 1 cue card\nconst cueCards=[...questionBank.part2CueCards];const selectedCueCard=cueCards[Math.floor(Math.random()*cueCards.length)];const part2Question=_objectSpread(_objectSpread({},selectedCueCard),{},{part:2,expectedDuration:120,// 1-2 minutes speaking\npreparationTime:60// 1 minute preparation\n});// PART 3: Select 4-6 discussion questions related to Part 2 topic\nconst relatedDiscussion=questionBank.part3Discussions.find(disc=>disc.relatedToPart2===selectedCueCard.id);let part3Questions=[];if(relatedDiscussion){const shuffledDiscQuestions=[...relatedDiscussion.questions].sort(()=>Math.random()-0.5);const numQuestions=Math.floor(Math.random()*3)+4;// 4-6 questions\npart3Questions=shuffledDiscQuestions.slice(0,numQuestions).map(q=>_objectSpread(_objectSpread({},q),{},{part:3,topicTheme:relatedDiscussion.topicTheme,expectedDuration:60// 30-60 seconds per answer\n}));}return{testId:\"ielts_test_\".concat(Date.now()),title:\"IELTS Speaking Test - \".concat(new Date().toLocaleDateString()),testStructure:{part1:{name:\"Part 1: Introduction & Interview\",duration:\"4-5 minutes\",questions:part1Questions,topics:[introTopic.topicName,secondTopic.topicName]},part2:{name:\"Part 2: Individual Long Turn\",duration:\"3-4 minutes\",question:part2Question,cueCard:selectedCueCard.cueCard},part3:{name:\"Part 3: Two-way Discussion\",duration:\"4-5 minutes\",questions:part3Questions,theme:(relatedDiscussion===null||relatedDiscussion===void 0?void 0:relatedDiscussion.topicTheme)||\"General Discussion\"}},// Flatten all questions for sequential navigation\nallQuestions:[...part1Questions.map(q=>_objectSpread(_objectSpread({},q),{},{prompt:q.prompt})),_objectSpread(_objectSpread({},part2Question),{},{prompt:part2Question.cueCard.mainPrompt}),...part3Questions.map(q=>_objectSpread(_objectSpread({},q),{},{prompt:q.prompt}))],totalQuestions:part1Questions.length+1+part3Questions.length};};// Pronunciation Analyzer Class (same as before)\nclass SimplePronunciationAnalyzer{constructor(){this.audioContext=null;this.analyser=null;this.features={pitch:[],rms:[],spectralCentroid:[],zcr:[]};this.isAnalyzing=false;}async initialize(){try{this.audioContext=new(window.AudioContext||window.webkitAudioContext)();if(this.audioContext.state==='suspended'){await this.audioContext.resume();}return true;}catch(error){console.error('Failed to initialize audio context:',error);return false;}}async startAnalysis(stream){if(!this.audioContext){throw new Error('Audio context not initialized');}const source=this.audioContext.createMediaStreamSource(stream);this.analyser=this.audioContext.createAnalyser();this.analyser.fftSize=2048;this.analyser.smoothingTimeConstant=0.8;source.connect(this.analyser);this.isAnalyzing=true;this.startFeatureExtraction();}startFeatureExtraction(){const bufferLength=this.analyser.frequencyBinCount;const dataArray=new Float32Array(bufferLength);const timeDataArray=new Float32Array(this.analyser.fftSize);const extractFeatures=()=>{if(!this.isAnalyzing)return;this.analyser.getFloatFrequencyData(dataArray);this.analyser.getFloatTimeDomainData(timeDataArray);const timestamp=this.audioContext.currentTime;const rms=this.calculateRMS(timeDataArray);const zcr=this.calculateZCR(timeDataArray);const spectralCentroid=this.calculateSpectralCentroid(dataArray);const pitch=this.detectPitch(timeDataArray);this.features.rms.push({value:rms,timestamp});this.features.zcr.push({value:zcr,timestamp});this.features.spectralCentroid.push({value:spectralCentroid,timestamp});if(pitch&&pitch>50&&pitch<800){this.features.pitch.push({frequency:pitch,timestamp});}requestAnimationFrame(extractFeatures);};extractFeatures();}calculateRMS(timeData){let sum=0;for(let i=0;i<timeData.length;i++){sum+=timeData[i]*timeData[i];}return Math.sqrt(sum/timeData.length);}calculateZCR(timeData){let zeroCrossings=0;for(let i=1;i<timeData.length;i++){if(timeData[i]>=0!==timeData[i-1]>=0){zeroCrossings++;}}return zeroCrossings/(timeData.length-1);}calculateSpectralCentroid(freqData){let weightedSum=0;let magnitudeSum=0;for(let i=0;i<freqData.length;i++){const magnitude=Math.pow(10,freqData[i]/10);const frequency=i*this.audioContext.sampleRate/(2*freqData.length);weightedSum+=frequency*magnitude;magnitudeSum+=magnitude;}return magnitudeSum>0?weightedSum/magnitudeSum:0;}detectPitch(timeData){const sampleRate=this.audioContext.sampleRate;const minPeriod=Math.floor(sampleRate/800);const maxPeriod=Math.floor(sampleRate/50);let bestCorrelation=0;let bestPeriod=0;for(let period=minPeriod;period<Math.min(maxPeriod,timeData.length/2);period++){let correlation=0;for(let i=0;i<timeData.length-period;i++){correlation+=timeData[i]*timeData[i+period];}if(correlation>bestCorrelation){bestCorrelation=correlation;bestPeriod=period;}}return bestPeriod>0?sampleRate/bestPeriod:0;}stopAnalysis(){this.isAnalyzing=false;}getFeatures(){return _objectSpread({},this.features);}reset(){this.features={pitch:[],rms:[],spectralCentroid:[],zcr:[]};this.isAnalyzing=false;}}// Main Speech Evaluator Component\nfunction SpeechEvaluator(){// State management\nconst[currentTest,setCurrentTest]=useState(null);const[currentQuestionIndex,setCurrentQuestionIndex]=useState(0);const[currentPart,setCurrentPart]=useState(1);const[answers,setAnswers]=useState([]);const[recording,setRecording]=useState(false);const[loading,setLoading]=useState(false);const[feedbacks,setFeedbacks]=useState(null);const[testSummary,setTestSummary]=useState(null);const[error,setError]=useState(null);const[recordingTime,setRecordingTime]=useState(0);const[showResults,setShowResults]=useState(false);// Part 2 specific states\nconst[preparationTime,setPreparationTime]=useState(0);const[isPreparingPart2,setIsPreparingPart2]=useState(false);const[preparationNotes,setPreparationNotes]=useState(\"\");const[autoStartRecording,setAutoStartRecording]=useState(false);// NEW: Flag for auto-start\n// Component ready state\nconst[isComponentReady,setIsComponentReady]=useState(false);const[initializationError,setInitializationError]=useState(null);// Pronunciation analysis state\nconst[pronunciationAnalyzer,setPronunciationAnalyzer]=useState(null);const[audioFeatures,setAudioFeatures]=useState({});const[isAnalyzingPronunciation,setIsAnalyzingPronunciation]=useState(false);// Refs\nconst recognitionRef=useRef(null);const recordingTimerRef=useRef(null);const preparationTimerRef=useRef(null);const currentStreamRef=useRef(null);// Initialize component\nuseEffect(()=>{const initializeComponent=async()=>{try{const test=createIELTSTest();setCurrentTest(test);setAnswers(Array(test.totalQuestions).fill(\"\"));const analyzer=new SimplePronunciationAnalyzer();setPronunciationAnalyzer(analyzer);setIsComponentReady(true);setInitializationError(null);}catch(error){console.error('Component initialization failed:',error);setInitializationError('Failed to initialize speech evaluator. Please refresh the page.');setIsComponentReady(true);}};initializeComponent();},[]);// Cleanup on unmount\nuseEffect(()=>{return()=>{if(recordingTimerRef.current)clearInterval(recordingTimerRef.current);if(preparationTimerRef.current)clearInterval(preparationTimerRef.current);if(currentStreamRef.current){currentStreamRef.current.getTracks().forEach(track=>track.stop());}if(pronunciationAnalyzer){pronunciationAnalyzer.stopAnalysis();}};},[pronunciationAnalyzer]);// NEW: Effect to handle auto-start recording after preparation\nuseEffect(()=>{if(autoStartRecording&&!isPreparingPart2&&preparationTime===0){// Small delay to ensure preparation phase is fully complete\nconst autoStartTimeout=setTimeout(()=>{startRecording();setAutoStartRecording(false);},500);return()=>clearTimeout(autoStartTimeout);}},[autoStartRecording,isPreparingPart2,preparationTime]);// Timer functions\nconst startRecordingTimer=useCallback(()=>{setRecordingTime(0);recordingTimerRef.current=setInterval(()=>{setRecordingTime(prev=>prev+1);},1000);},[]);const stopRecordingTimer=useCallback(()=>{if(recordingTimerRef.current){clearInterval(recordingTimerRef.current);recordingTimerRef.current=null;}},[]);// UPDATED: Preparation timer with auto-start flag\nconst startPreparationTimer=useCallback(()=>{setPreparationTime(60);// 1 minute for Part 2\nsetAutoStartRecording(true);// Set flag to auto-start recording\npreparationTimerRef.current=setInterval(()=>{setPreparationTime(prev=>{if(prev<=1){clearInterval(preparationTimerRef.current);setIsPreparingPart2(false);// Auto-start will be triggered by useEffect\nreturn 0;}return prev-1;});},1000);},[]);const formatTime=useCallback(seconds=>{const mins=Math.floor(seconds/60);const secs=seconds%60;return\"\".concat(mins,\":\").concat(secs.toString().padStart(2,'0'));},[]);// Determine current part based on question index\nconst getCurrentPartInfo=()=>{if(!currentTest)return null;const part1Length=currentTest.testStructure.part1.questions.length;const part2Index=part1Length;const part3StartIndex=part1Length+1;if(currentQuestionIndex<part1Length){return{part:1,info:currentTest.testStructure.part1};}else if(currentQuestionIndex===part2Index){return{part:2,info:currentTest.testStructure.part2};}else{return{part:3,info:currentTest.testStructure.part3};}};// Start Part 2 preparation\nconst startPart2Preparation=()=>{setIsPreparingPart2(true);setPreparationNotes(\"\");startPreparationTimer();};// UPDATED: Separated recording logic for reuse\nconst startRecording=async()=>{// Initialize AudioContext on first user interaction\nif(pronunciationAnalyzer&&!pronunciationAnalyzer.audioContext){try{await pronunciationAnalyzer.initialize();}catch(error){console.warn('AudioContext initialization error:',error);}}// Check browser support\nif(!(\"webkitSpeechRecognition\"in window)&&!(\"SpeechRecognition\"in window)){setError(\"Speech recognition is not supported in this browser. Please use Chrome or Edge.\");return;}try{const stream=await navigator.mediaDevices.getUserMedia({audio:{echoCancellation:true,noiseSuppression:true,autoGainControl:false}});currentStreamRef.current=stream;// Start pronunciation analysis\nif(pronunciationAnalyzer&&pronunciationAnalyzer.audioContext){try{pronunciationAnalyzer.reset();await pronunciationAnalyzer.startAnalysis(stream);setIsAnalyzingPronunciation(true);}catch(analysisError){console.warn('Pronunciation analysis failed:',analysisError);}}// Setup speech recognition\nconst SpeechRecognition=window.SpeechRecognition||window.webkitSpeechRecognition;const recognition=new SpeechRecognition();recognition.lang=\"en-US\";recognition.continuous=true;recognition.interimResults=false;recognition.onstart=()=>{setRecording(true);setError(null);startRecordingTimer();};recognition.onresult=event=>{const speechText=Array.from(event.results).map(result=>result[0].transcript).join(\" \");setAnswers(prev=>{const newAnswers=[...prev];newAnswers[currentQuestionIndex]=speechText.trim();return newAnswers;});};recognition.onend=()=>{setRecording(false);stopRecordingTimer();};recognition.onerror=event=>{setError(\"Speech recognition error: \".concat(event.error,\". Please try again.\"));setRecording(false);stopRecordingTimer();setIsAnalyzingPronunciation(false);};recognitionRef.current=recognition;recognition.start();}catch(err){setError(\"Failed to access microphone. Please check permissions and try again.\");console.error(\"Microphone access error:\",err);}};const stopRecording=()=>{var _recognitionRef$curre;(_recognitionRef$curre=recognitionRef.current)===null||_recognitionRef$curre===void 0?void 0:_recognitionRef$curre.stop();if(pronunciationAnalyzer&&isAnalyzingPronunciation){pronunciationAnalyzer.stopAnalysis();const features=pronunciationAnalyzer.getFeatures();setAudioFeatures(prev=>_objectSpread(_objectSpread({},prev),{},{[currentQuestionIndex]:features}));setIsAnalyzingPronunciation(false);}if(currentStreamRef.current){currentStreamRef.current.getTracks().forEach(track=>track.stop());}// Add auto-advance to next question (Part 3)\nsetTimeout(goNext,1500);};// UPDATED: Toggle recording function\nconst toggleRecording=async()=>{if(recording){stopRecording();}else{await startRecording();}};// Navigation functions\nconst goNext=()=>{if(currentQuestionIndex<currentTest.totalQuestions-1){const nextIndex=currentQuestionIndex+1;const nextPartInfo=getCurrentPartInfo();// Check if moving to Part 2\nif((nextPartInfo===null||nextPartInfo===void 0?void 0:nextPartInfo.part)===2&&currentQuestionIndex+1===currentTest.testStructure.part1.questions.length){setCurrentPart(2);}else if((nextPartInfo===null||nextPartInfo===void 0?void 0:nextPartInfo.part)===3&&!currentPart===3){setCurrentPart(3);}setCurrentQuestionIndex(nextIndex);}};const goPrev=()=>{if(currentQuestionIndex>0){const prevIndex=currentQuestionIndex-1;setCurrentQuestionIndex(prevIndex);// Update current part\nconst partInfo=getCurrentPartInfo();if(partInfo){setCurrentPart(partInfo.part);}}};// Submit test\nconst submitTest=async()=>{setLoading(true);setError(null);try{const response=await fetch(\"/api/analyze-batch\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({testId:currentTest.testId,questions:currentTest.allQuestions.map(q=>q.prompt),answers,audioFeatures,testType:\"IELTS_AUTHENTIC\"})});if(!response.ok)throw new Error(\"Server error: \".concat(response.status));const data=await response.json();setFeedbacks(data.feedbacks);setTestSummary(data.testSummary);setShowResults(true);}catch(err){console.error(\"Analysis error:\",err);setError(\"Error during analysis. Please check your connection and try again.\");}finally{setLoading(false);}};// Reset test\nconst resetTest=()=>{const newTest=createIELTSTest();setCurrentTest(newTest);setAnswers(Array(newTest.totalQuestions).fill(\"\"));setCurrentQuestionIndex(0);setCurrentPart(1);setFeedbacks(null);setTestSummary(null);setShowResults(false);setError(null);setRecordingTime(0);setPreparationTime(0);setIsPreparingPart2(false);setPreparationNotes(\"\");setAutoStartRecording(false);if(pronunciationAnalyzer)pronunciationAnalyzer.reset();};// Get band color\nconst getBandColor=band=>{if(band>=8.5)return\"#2e7d32\";if(band>=7)return\"#388e3c\";if(band>=6.5)return\"#689f38\";if(band>=6)return\"#afb42b\";if(band>=5.5)return\"#f57f17\";if(band>=5)return\"#ff8f00\";if(band>=4)return\"#d32f2f\";return\"#d32f2f\";};// Loading state\nif(!isComponentReady){return/*#__PURE__*/_jsxs(\"div\",{className:\"loading-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Loading IELTS Speaking Test...\"}),initializationError?/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:/*#__PURE__*/_jsx(\"p\",{children:initializationError})}):/*#__PURE__*/_jsx(\"p\",{children:\"Setting up authentic IELTS format with auto-recording...\"})]});}// Get current question and part info\nconst currentQuestion=currentTest.allQuestions[currentQuestionIndex];const currentPartInfo=getCurrentPartInfo();// Results view\n// Results view\nif(showResults){// ✅ NEW: Prevent crash if testSummary is null\nif(!testSummary){return/*#__PURE__*/_jsxs(\"div\",{className:\"results-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"IELTS Speaking Test Results\"}),/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:\"No test summary data available. Please try again.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:resetTest,className:\"btn-primary TakeAnother\",children:\"Take Another Test\"})]});}const improvementData=[{name:\"Fluency & Coherence\",value:testSummary.fluency},{name:\"Lexical Resource\",value:testSummary.lexical},{name:\"Grammatical Range & Accuracy\",value:testSummary.grammar},{name:\"Pronunciation\",value:testSummary.pronunciation}];const COLORS=improvementData.map(item=>getBandColor(item.value));return/*#__PURE__*/_jsxs(\"div\",{className:\"results-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"IELTS Speaking Test Results\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"test-summary\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Overall Performance\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"band-scores-grid\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"band-score\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Fluency & Coherence\"}),/*#__PURE__*/_jsx(\"span\",{style:{color:getBandColor(testSummary.fluency)},children:testSummary.fluency})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"band-score\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Lexical Resource\"}),/*#__PURE__*/_jsx(\"span\",{style:{color:getBandColor(testSummary.lexical)},children:testSummary.lexical})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"band-score\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Grammatical Range & Accuracy\"}),/*#__PURE__*/_jsx(\"span\",{style:{color:getBandColor(testSummary.grammar)},children:testSummary.grammar})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"band-score\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Pronunciation\"}),/*#__PURE__*/_jsx(\"span\",{style:{color:getBandColor(testSummary.pronunciation)},children:testSummary.pronunciation})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"band-score overall\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Overall Band Score\"}),/*#__PURE__*/_jsx(\"span\",{children:testSummary.overall})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"detailed-feedback\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Detailed Question-by-Question Feedback\"}),feedbacks.map((feedback,index)=>/*#__PURE__*/_jsxs(\"details\",{className:\"feedback-section\",open:index===0,children:[/*#__PURE__*/_jsx(\"summary\",{className:index===0?\"feedback-summary overall-summary\":\"feedback-summary\",style:index===0?{color:(testSummary===null||testSummary===void 0?void 0:testSummary.overall)>=5?\"#2e7d32\":\"#d32f2f\"}:{},children:index===0?\"Overall Performance\":\"Question \".concat(index,\" Feedback\")}),/*#__PURE__*/_jsx(\"pre\",{children:feedback.feedback})]},index))]}),/*#__PURE__*/_jsx(\"div\",{className:\"nav-buttons\",children:/*#__PURE__*/_jsx(\"button\",{onClick:resetTest,className:\"btn-primary TakeAnother\",children:\"Take Another Test\"})})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"speech-evaluator\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"test-header\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"test-info\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"progress\",children:[\"Question \",currentQuestionIndex+1,\" of \",currentTest.totalQuestions]})}),/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-fill\",style:{width:\"\".concat(currentQuestionIndex/currentTest.totalQuestions*100,\"%\")}})})]}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:/*#__PURE__*/_jsx(\"p\",{children:error})}),/*#__PURE__*/_jsxs(\"div\",{className:\"test-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"part-indicator\",children:[/*#__PURE__*/_jsx(\"h2\",{children:currentPartInfo===null||currentPartInfo===void 0?void 0:currentPartInfo.info.name}),/*#__PURE__*/_jsxs(\"p\",{className:\"part-duration\",children:[\"Duration: \",currentPartInfo===null||currentPartInfo===void 0?void 0:currentPartInfo.info.duration]}),(currentPartInfo===null||currentPartInfo===void 0?void 0:currentPartInfo.part)===1&&/*#__PURE__*/_jsxs(\"p\",{className:\"part-description\",children:[\"Topics: \",currentPartInfo.info.topics.join(\" & \"),\" (\",currentPartInfo.info.questions.length,\" questions)\"]}),(currentPartInfo===null||currentPartInfo===void 0?void 0:currentPartInfo.part)===2&&/*#__PURE__*/_jsx(\"p\",{className:\"part-description\",children:\"\\uD83D\\uDCDD 1-minute preparation \\u2192 \\uD83C\\uDFA4 Auto-recording starts \\u2192 \\uD83D\\uDDE3\\uFE0F Speak for 1-2 minutes\"}),(currentPartInfo===null||currentPartInfo===void 0?void 0:currentPartInfo.part)===3&&/*#__PURE__*/_jsxs(\"p\",{className:\"part-description\",children:[\"Theme: \",currentPartInfo.info.theme,\" (\",currentPartInfo.info.questions.length,\" questions)\"]})]}),(currentPartInfo===null||currentPartInfo===void 0?void 0:currentPartInfo.part)===2&&!isPreparingPart2&&preparationTime===0&&!recording&&/*#__PURE__*/_jsxs(\"div\",{className:\"part2-preparation-intro\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uD83D\\uDCDD Part 2: Preparation Phase\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Click the button below to see your cue card and start the 1-minute preparation timer.\"}),/*#__PURE__*/_jsx(\"p\",{children:\"After preparation ends, recording will start automatically.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:startPart2Preparation,className:\"btn-primary\",children:\"Start Preparation (1 minute)\"})]}),(currentPartInfo===null||currentPartInfo===void 0?void 0:currentPartInfo.part)===2&&isPreparingPart2&&/*#__PURE__*/_jsxs(\"div\",{className:\"preparation-phase\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"\\u23F1\\uFE0F Preparation Time Remaining: \",formatTime(preparationTime)]}),preparationTime<=5&&/*#__PURE__*/_jsx(\"div\",{className:\"countdown-warning\",children:/*#__PURE__*/_jsx(\"p\",{className:\"auto-start-notice\",children:\"\\uD83C\\uDFA4 Recording will start automatically when timer reaches 0:00\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"cue-card\",children:[/*#__PURE__*/_jsx(\"h4\",{children:currentQuestion.cueCard.mainPrompt}),/*#__PURE__*/_jsx(\"p\",{children:\"You should say:\"}),/*#__PURE__*/_jsx(\"ul\",{children:currentQuestion.cueCard.bulletPoints.map((point,index)=>/*#__PURE__*/_jsx(\"li\",{children:point},index))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"preparation-notes\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"prep-notes\",children:\"\\uD83D\\uDCDD Your preparation notes (optional):\"}),/*#__PURE__*/_jsx(\"textarea\",{id:\"prep-notes\",value:preparationNotes,onChange:e=>setPreparationNotes(e.target.value),placeholder:\"Jot down key points here...\",rows:\"4\"})]})]}),(currentPartInfo===null||currentPartInfo===void 0?void 0:currentPartInfo.part)===2&&recording&&/*#__PURE__*/_jsxs(\"div\",{className:\"recording-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"auto-recording-status\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"recording-indicator\",children:\"\\uD83D\\uDD34 Recording\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"recording-time\",children:[\"Time: \",formatTime(recordingTime)]})]}),/*#__PURE__*/_jsx(\"p\",{className:\"recording-instruction\",children:\"Speak for 1-2 minutes covering all the points mentioned in the cue card.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:stopRecording,className:\"record-button recording\",children:\"\\u23F9\\uFE0F Stop Recording\"})]}),(currentPartInfo===null||currentPartInfo===void 0?void 0:currentPartInfo.part)!==2&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"question-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"question-header\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"question-number\",children:[\"Question \",currentQuestionIndex+1]}),/*#__PURE__*/_jsx(\"span\",{className:\"topic-badge\",children:currentQuestion.topicName||currentQuestion.category})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"question-content\",children:[/*#__PURE__*/_jsx(\"h3\",{children:currentQuestion.prompt}),/*#__PURE__*/_jsx(\"div\",{className:\"duration-guide\",children:/*#__PURE__*/_jsx(\"span\",{children:\"\\u23F1\\uFE0F Expected duration: 20-30 seconds\"})})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"recording-section\",children:/*#__PURE__*/_jsx(\"div\",{className:\"recording-controls\",children:!recording?/*#__PURE__*/_jsx(\"button\",{onClick:startRecording,className:\"record-button\",children:\"\\uD83C\\uDFA4 Start Recording\"}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"You may now begin speaking. Recording time: \",/*#__PURE__*/_jsx(\"strong\",{children:formatTime(recordingTime)})]}),/*#__PURE__*/_jsx(\"button\",{onClick:stopRecording,className:\"record-button recording\",children:\"\\u23F9\\uFE0F Stop Recording\"})]})})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"answer-section\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"answer\",children:\"Your transcribed answer:\"}),/*#__PURE__*/_jsx(\"textarea\",{id:\"answer\",value:answers[currentQuestionIndex]||\"\",onChange:e=>{const newAnswers=[...answers];newAnswers[currentQuestionIndex]=e.target.value;setAnswers(newAnswers);},disabled:recording,placeholder:\"Your answer will appear here during recording...\"}),(currentPartInfo===null||currentPartInfo===void 0?void 0:currentPartInfo.part)===2&&preparationNotes&&/*#__PURE__*/_jsxs(\"div\",{className:\"notes-reference\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Your preparation notes:\"}),/*#__PURE__*/_jsx(\"p\",{children:preparationNotes})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"navigation-section\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"nav-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:goPrev,disabled:currentQuestionIndex===0,className:\"btn-secondary\",children:\"\\u2190 Previous\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"progress-info\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Part 1:\"}),\" \",currentTest.testStructure.part1.questions.length,\" questions |\",/*#__PURE__*/_jsx(\"strong\",{children:\" Part 2:\"}),\" 1 cue card (auto-record) |\",/*#__PURE__*/_jsx(\"strong\",{children:\" Part 3:\"}),\" \",currentTest.testStructure.part3.questions.length,\" questions\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Progress: \",answers.filter(a=>a.trim().length>0).length,\" / \",currentTest.totalQuestions,\" questions answered\"]})]}),currentQuestionIndex<currentTest.totalQuestions-1?/*#__PURE__*/_jsx(\"button\",{onClick:goNext,className:\"btn-primary\",children:\"Next \\u2192\"}):/*#__PURE__*/_jsx(\"button\",{onClick:submitTest,disabled:loading||recording,className:\"btn-success\",children:loading?\"Analyzing...\":\"Submit Test\"})]})})]})]});}export default SpeechEvaluator;","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","questionBank","PieChart","Pie","Cell","Tooltip","Legend","ResponsiveContainer","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","createIELTSTest","availableTopics","part1Topics","shuffledTopics","sort","Math","random","introTopic","introQuestions","questions","slice","secondTopic","secondQuestions","part1Questions","forEach","q","push","_objectSpread","topicName","part","expectedDuration","cueCards","part2CueCards","selectedCueCard","floor","length","part2Question","preparationTime","relatedDiscussion","part3Discussions","find","disc","relatedToPart2","id","part3Questions","shuffledDiscQuestions","numQuestions","map","topicTheme","testId","concat","Date","now","title","toLocaleDateString","testStructure","part1","name","duration","topics","part2","question","cueCard","part3","theme","allQuestions","prompt","mainPrompt","totalQuestions","SimplePronunciationAnalyzer","constructor","audioContext","analyser","features","pitch","rms","spectralCentroid","zcr","isAnalyzing","initialize","window","AudioContext","webkitAudioContext","state","resume","error","console","startAnalysis","stream","Error","source","createMediaStreamSource","createAnalyser","fftSize","smoothingTimeConstant","connect","startFeatureExtraction","bufferLength","frequencyBinCount","dataArray","Float32Array","timeDataArray","extractFeatures","getFloatFrequencyData","getFloatTimeDomainData","timestamp","currentTime","calculateRMS","calculateZCR","calculateSpectralCentroid","detectPitch","value","frequency","requestAnimationFrame","timeData","sum","i","sqrt","zeroCrossings","freqData","weightedSum","magnitudeSum","magnitude","pow","sampleRate","minPeriod","maxPeriod","bestCorrelation","bestPeriod","period","min","correlation","stopAnalysis","getFeatures","reset","SpeechEvaluator","currentTest","setCurrentTest","currentQuestionIndex","setCurrentQuestionIndex","currentPart","setCurrentPart","answers","setAnswers","recording","setRecording","loading","setLoading","feedbacks","setFeedbacks","testSummary","setTestSummary","setError","recordingTime","setRecordingTime","showResults","setShowResults","setPreparationTime","isPreparingPart2","setIsPreparingPart2","preparationNotes","setPreparationNotes","autoStartRecording","setAutoStartRecording","isComponentReady","setIsComponentReady","initializationError","setInitializationError","pronunciationAnalyzer","setPronunciationAnalyzer","audioFeatures","setAudioFeatures","isAnalyzingPronunciation","setIsAnalyzingPronunciation","recognitionRef","recordingTimerRef","preparationTimerRef","currentStreamRef","initializeComponent","test","Array","fill","analyzer","current","clearInterval","getTracks","track","stop","autoStartTimeout","setTimeout","startRecording","clearTimeout","startRecordingTimer","setInterval","prev","stopRecordingTimer","startPreparationTimer","formatTime","seconds","mins","secs","toString","padStart","getCurrentPartInfo","part1Length","part2Index","part3StartIndex","info","startPart2Preparation","warn","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","analysisError","SpeechRecognition","webkitSpeechRecognition","recognition","lang","continuous","interimResults","onstart","onresult","event","speechText","from","results","result","transcript","join","newAnswers","trim","onend","onerror","start","err","stopRecording","_recognitionRef$curre","goNext","toggleRecording","nextIndex","nextPartInfo","goPrev","prevIndex","partInfo","submitTest","response","fetch","method","headers","body","JSON","stringify","testType","ok","status","data","json","resetTest","newTest","getBandColor","band","className","children","currentQuestion","currentPartInfo","onClick","improvementData","fluency","lexical","grammar","pronunciation","COLORS","item","style","color","overall","feedback","index","open","width","bulletPoints","point","htmlFor","onChange","e","target","placeholder","rows","category","disabled","filter","a"],"sources":["C:/Users/Lenovo/Desktop/IELTS Speaking/ielts-speech-evaluator v0.2/src/components/SpeechEvaluator.jsx"],"sourcesContent":["// Enhanced SpeechEvaluator.jsx - Auto-Start Recording after Part 2 Preparation\n// Part 1: 7-8 questions from 2-3 topics, Part 2: 1 cue card (auto-record), Part 3: 4-6 discussion questions\n\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport questionBank from \"../data/questions-corrected\";\nimport './SpeechEvaluator.css';\nimport { PieChart, Pie, Cell, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\n\n\n// Function to create authentic IELTS test structure (same as before)\nconst createIELTSTest = () => {\n  // PART 1: Select 2-3 topics and get 7-8 questions total\n  const availableTopics = [...questionBank.part1Topics];\n  const shuffledTopics = availableTopics.sort(() => Math.random() - 0.5);\n  \n  // First topic: 3-4 questions (mandatory introductory topic)\n  const introTopic = shuffledTopics[0];\n  const introQuestions = [...introTopic.questions]\n  .sort(() => Math.random() - 0.5)\n  .slice(0, 2);\n  \n  // Second topic: 3-4 questions\n  const secondTopic = shuffledTopics[1];\n  const secondQuestions = [...secondTopic.questions]\n  .sort(() => Math.random() - 0.5)\n  .slice(0, Math.random() > 0.5 ? 2 : 3);\n  \n  // Build Part 1 questions (7-8 total)\n  let part1Questions = [];\n  \n  // Add questions from first topic\n  introQuestions.forEach(q => {\n    part1Questions.push({\n      ...q,\n      topicName: introTopic.topicName,\n      part: 1,\n      expectedDuration: 30 // 20-30 seconds per answer\n    });\n  });\n  \n  // Add questions from second topic\n  secondQuestions.forEach(q => {\n    part1Questions.push({\n      ...q,\n      topicName: secondTopic.topicName,\n      part: 1,\n      expectedDuration: 30\n    });\n  });\n  \n  // PART 2: Select 1 cue card\n  const cueCards = [...questionBank.part2CueCards];\n  const selectedCueCard = cueCards[Math.floor(Math.random() * cueCards.length)];\n  const part2Question = {\n    ...selectedCueCard,\n    part: 2,\n    expectedDuration: 120, // 1-2 minutes speaking\n    preparationTime: 60 // 1 minute preparation\n  };\n  \n  // PART 3: Select 4-6 discussion questions related to Part 2 topic\n  const relatedDiscussion = questionBank.part3Discussions.find(\n    disc => disc.relatedToPart2 === selectedCueCard.id\n  );\n  let part3Questions = [];\n  if (relatedDiscussion) {\n    const shuffledDiscQuestions = [...relatedDiscussion.questions].sort(() => Math.random() - 0.5);\n    const numQuestions = Math.floor(Math.random() * 3) + 4; // 4-6 questions\n    part3Questions = shuffledDiscQuestions.slice(0, numQuestions).map(q => ({\n      ...q,\n      part: 3,\n      topicTheme: relatedDiscussion.topicTheme,\n      expectedDuration: 60 // 30-60 seconds per answer\n    }));\n  }\n  \n  return {\n    testId: `ielts_test_${Date.now()}`,\n    title: `IELTS Speaking Test - ${new Date().toLocaleDateString()}`,\n    testStructure: {\n      part1: {\n        name: \"Part 1: Introduction & Interview\",\n        duration: \"4-5 minutes\",\n        questions: part1Questions,\n        topics: [introTopic.topicName, secondTopic.topicName]\n      },\n      part2: {\n        name: \"Part 2: Individual Long Turn\",\n        duration: \"3-4 minutes\",\n        question: part2Question,\n        cueCard: selectedCueCard.cueCard\n      },\n      part3: {\n        name: \"Part 3: Two-way Discussion\",\n        duration: \"4-5 minutes\",\n        questions: part3Questions,\n        theme: relatedDiscussion?.topicTheme || \"General Discussion\"\n      }\n    },\n    // Flatten all questions for sequential navigation\n    allQuestions: [\n      ...part1Questions.map(q => ({ ...q, prompt: q.prompt })),\n      { ...part2Question, prompt: part2Question.cueCard.mainPrompt },\n      ...part3Questions.map(q => ({ ...q, prompt: q.prompt }))\n    ],\n    totalQuestions: part1Questions.length + 1 + part3Questions.length\n  };\n};\n\n// Pronunciation Analyzer Class (same as before)\nclass SimplePronunciationAnalyzer {\n  constructor() {\n    this.audioContext = null;\n    this.analyser = null;\n    this.features = {\n      pitch: [],\n      rms: [],\n      spectralCentroid: [],\n      zcr: []\n    };\n    this.isAnalyzing = false;\n  }\n\n  async initialize() {\n    try {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n      }\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize audio context:', error);\n      return false;\n    }\n  }\n\n  async startAnalysis(stream) {\n    if (!this.audioContext) {\n      throw new Error('Audio context not initialized');\n    }\n\n    const source = this.audioContext.createMediaStreamSource(stream);\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = 2048;\n    this.analyser.smoothingTimeConstant = 0.8;\n\n    source.connect(this.analyser);\n    this.isAnalyzing = true;\n    this.startFeatureExtraction();\n  }\n\n  startFeatureExtraction() {\n    const bufferLength = this.analyser.frequencyBinCount;\n    const dataArray = new Float32Array(bufferLength);\n    const timeDataArray = new Float32Array(this.analyser.fftSize);\n\n    const extractFeatures = () => {\n      if (!this.isAnalyzing) return;\n\n      this.analyser.getFloatFrequencyData(dataArray);\n      this.analyser.getFloatTimeDomainData(timeDataArray);\n\n      const timestamp = this.audioContext.currentTime;\n      const rms = this.calculateRMS(timeDataArray);\n      const zcr = this.calculateZCR(timeDataArray);\n      const spectralCentroid = this.calculateSpectralCentroid(dataArray);\n      const pitch = this.detectPitch(timeDataArray);\n\n      this.features.rms.push({ value: rms, timestamp });\n      this.features.zcr.push({ value: zcr, timestamp });\n      this.features.spectralCentroid.push({ value: spectralCentroid, timestamp });\n\n      if (pitch && pitch > 50 && pitch < 800) {\n        this.features.pitch.push({ frequency: pitch, timestamp });\n      }\n\n      requestAnimationFrame(extractFeatures);\n    };\n\n    extractFeatures();\n  }\n\n  calculateRMS(timeData) {\n    let sum = 0;\n    for (let i = 0; i < timeData.length; i++) {\n      sum += timeData[i] * timeData[i];\n    }\n    return Math.sqrt(sum / timeData.length);\n  }\n\n  calculateZCR(timeData) {\n    let zeroCrossings = 0;\n    for (let i = 1; i < timeData.length; i++) {\n      if ((timeData[i] >= 0) !== (timeData[i - 1] >= 0)) {\n        zeroCrossings++;\n      }\n    }\n    return zeroCrossings / (timeData.length - 1);\n  }\n\n  calculateSpectralCentroid(freqData) {\n    let weightedSum = 0;\n    let magnitudeSum = 0;\n\n    for (let i = 0; i < freqData.length; i++) {\n      const magnitude = Math.pow(10, freqData[i] / 10);\n      const frequency = (i * this.audioContext.sampleRate) / (2 * freqData.length);\n      weightedSum += frequency * magnitude;\n      magnitudeSum += magnitude;\n    }\n\n    return magnitudeSum > 0 ? weightedSum / magnitudeSum : 0;\n  }\n\n  detectPitch(timeData) {\n    const sampleRate = this.audioContext.sampleRate;\n    const minPeriod = Math.floor(sampleRate / 800);\n    const maxPeriod = Math.floor(sampleRate / 50);\n\n    let bestCorrelation = 0;\n    let bestPeriod = 0;\n\n    for (let period = minPeriod; period < Math.min(maxPeriod, timeData.length / 2); period++) {\n      let correlation = 0;\n      for (let i = 0; i < timeData.length - period; i++) {\n        correlation += timeData[i] * timeData[i + period];\n      }\n\n      if (correlation > bestCorrelation) {\n        bestCorrelation = correlation;\n        bestPeriod = period;\n      }\n    }\n\n    return bestPeriod > 0 ? sampleRate / bestPeriod : 0;\n  }\n\n  stopAnalysis() {\n    this.isAnalyzing = false;\n  }\n\n  getFeatures() {\n    return { ...this.features };\n  }\n\n  reset() {\n    this.features = {\n      pitch: [],\n      rms: [],\n      spectralCentroid: [],\n      zcr: []\n    };\n    this.isAnalyzing = false;\n  }\n}\n\n// Main Speech Evaluator Component\nfunction SpeechEvaluator() {\n  // State management\n  const [currentTest, setCurrentTest] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [currentPart, setCurrentPart] = useState(1);\n  const [answers, setAnswers] = useState([]);\n  const [recording, setRecording] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [feedbacks, setFeedbacks] = useState(null);\n  const [testSummary, setTestSummary] = useState(null);\n  const [error, setError] = useState(null);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n\n  // Part 2 specific states\n  const [preparationTime, setPreparationTime] = useState(0);\n  const [isPreparingPart2, setIsPreparingPart2] = useState(false);\n  const [preparationNotes, setPreparationNotes] = useState(\"\");\n  const [autoStartRecording, setAutoStartRecording] = useState(false); // NEW: Flag for auto-start\n\n  // Component ready state\n  const [isComponentReady, setIsComponentReady] = useState(false);\n  const [initializationError, setInitializationError] = useState(null);\n\n  // Pronunciation analysis state\n  const [pronunciationAnalyzer, setPronunciationAnalyzer] = useState(null);\n  const [audioFeatures, setAudioFeatures] = useState({});\n  const [isAnalyzingPronunciation, setIsAnalyzingPronunciation] = useState(false);\n\n  // Refs\n  const recognitionRef = useRef(null);\n  const recordingTimerRef = useRef(null);\n  const preparationTimerRef = useRef(null);\n  const currentStreamRef = useRef(null);\n\n  // Initialize component\n  useEffect(() => {\n    const initializeComponent = async () => {\n      try {\n        const test = createIELTSTest();\n        setCurrentTest(test);\n        setAnswers(Array(test.totalQuestions).fill(\"\"));\n        const analyzer = new SimplePronunciationAnalyzer();\n        setPronunciationAnalyzer(analyzer);\n        setIsComponentReady(true);\n        setInitializationError(null);\n      } catch (error) {\n        console.error('Component initialization failed:', error);\n        setInitializationError('Failed to initialize speech evaluator. Please refresh the page.');\n        setIsComponentReady(true);\n      }\n    };\n\n    initializeComponent();\n  }, []);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (recordingTimerRef.current) clearInterval(recordingTimerRef.current);\n      if (preparationTimerRef.current) clearInterval(preparationTimerRef.current);\n      if (currentStreamRef.current) {\n        currentStreamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (pronunciationAnalyzer) {\n        pronunciationAnalyzer.stopAnalysis();\n      }\n    };\n  }, [pronunciationAnalyzer]);\n\n  // NEW: Effect to handle auto-start recording after preparation\n  useEffect(() => {\n    if (autoStartRecording && !isPreparingPart2 && preparationTime === 0) {\n      // Small delay to ensure preparation phase is fully complete\n      const autoStartTimeout = setTimeout(() => {\n        startRecording();\n        setAutoStartRecording(false);\n      }, 500);\n      return () => clearTimeout(autoStartTimeout);\n    }\n  }, [autoStartRecording, isPreparingPart2, preparationTime]);\n\n  // Timer functions\n  const startRecordingTimer = useCallback(() => {\n    setRecordingTime(0);\n    recordingTimerRef.current = setInterval(() => {\n      setRecordingTime(prev => prev + 1);\n    }, 1000);\n  }, []);\n\n  const stopRecordingTimer = useCallback(() => {\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n      recordingTimerRef.current = null;\n    }\n  }, []);\n\n  // UPDATED: Preparation timer with auto-start flag\n  const startPreparationTimer = useCallback(() => {\n    setPreparationTime(60); // 1 minute for Part 2\n    setAutoStartRecording(true); // Set flag to auto-start recording\n    preparationTimerRef.current = setInterval(() => {\n      setPreparationTime(prev => {\n        if (prev <= 1) {\n          clearInterval(preparationTimerRef.current);\n          setIsPreparingPart2(false);\n          // Auto-start will be triggered by useEffect\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  }, []);\n\n  const formatTime = useCallback((seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n\n  // Determine current part based on question index\n  const getCurrentPartInfo = () => {\n    if (!currentTest) return null;\n\n    const part1Length = currentTest.testStructure.part1.questions.length;\n    const part2Index = part1Length;\n    const part3StartIndex = part1Length + 1;\n\n    if (currentQuestionIndex < part1Length) {\n      return { part: 1, info: currentTest.testStructure.part1 };\n    } else if (currentQuestionIndex === part2Index) {\n      return { part: 2, info: currentTest.testStructure.part2 };\n    } else {\n      return { part: 3, info: currentTest.testStructure.part3 };\n    }\n  };\n\n  // Start Part 2 preparation\n  const startPart2Preparation = () => {\n    setIsPreparingPart2(true);\n    setPreparationNotes(\"\");\n    startPreparationTimer();\n  };\n\n  // UPDATED: Separated recording logic for reuse\n  const startRecording = async () => {\n    // Initialize AudioContext on first user interaction\n    if (pronunciationAnalyzer && !pronunciationAnalyzer.audioContext) {\n      try {\n        await pronunciationAnalyzer.initialize();\n      } catch (error) {\n        console.warn('AudioContext initialization error:', error);\n      }\n    }\n\n    // Check browser support\n    if (!(\"webkitSpeechRecognition\" in window) && !(\"SpeechRecognition\" in window)) {\n      setError(\"Speech recognition is not supported in this browser. Please use Chrome or Edge.\");\n      return;\n    }\n\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: false\n        }\n      });\n\n      currentStreamRef.current = stream;\n\n      // Start pronunciation analysis\n      if (pronunciationAnalyzer && pronunciationAnalyzer.audioContext) {\n        try {\n          pronunciationAnalyzer.reset();\n          await pronunciationAnalyzer.startAnalysis(stream);\n          setIsAnalyzingPronunciation(true);\n        } catch (analysisError) {\n          console.warn('Pronunciation analysis failed:', analysisError);\n        }\n      }\n\n      // Setup speech recognition\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      recognition.lang = \"en-US\";\n      recognition.continuous = true;\n      recognition.interimResults = false;\n\n      recognition.onstart = () => {\n        setRecording(true);\n        setError(null);\n        startRecordingTimer();\n      };\n\n      recognition.onresult = (event) => {\n        const speechText = Array.from(event.results).map(result => result[0].transcript).join(\" \");\n        setAnswers(prev => {\n          const newAnswers = [...prev];\n          newAnswers[currentQuestionIndex] = speechText.trim();\n          return newAnswers;\n        });\n      };\n\n      recognition.onend = () => {\n        setRecording(false);\n        stopRecordingTimer();\n      };\n\n      recognition.onerror = (event) => {\n        setError(`Speech recognition error: ${event.error}. Please try again.`);\n        setRecording(false);\n        stopRecordingTimer();\n        setIsAnalyzingPronunciation(false);\n      };\n\n      recognitionRef.current = recognition;\n      recognition.start();\n    } catch (err) {\n      setError(\"Failed to access microphone. Please check permissions and try again.\");\n      console.error(\"Microphone access error:\", err);\n    }\n  };\n\n  const stopRecording = () => {\n    recognitionRef.current?.stop();\n    if (pronunciationAnalyzer && isAnalyzingPronunciation) {\n      pronunciationAnalyzer.stopAnalysis();\n      const features = pronunciationAnalyzer.getFeatures();\n      setAudioFeatures(prev => ({ ...prev, [currentQuestionIndex]: features }));\n      setIsAnalyzingPronunciation(false);\n    }\n    if (currentStreamRef.current) {\n      currentStreamRef.current.getTracks().forEach(track => track.stop());\n    }\n    // Add auto-advance to next question (Part 3)\n    setTimeout(goNext, 1500);\n  };\n\n  // UPDATED: Toggle recording function\n  const toggleRecording = async () => {\n    if (recording) {\n      stopRecording();\n    } else {\n      await startRecording();\n    }\n  };\n\n  // Navigation functions\n  const goNext = () => {\n    if (currentQuestionIndex < currentTest.totalQuestions - 1) {\n      const nextIndex = currentQuestionIndex + 1;\n      const nextPartInfo = getCurrentPartInfo();\n\n      // Check if moving to Part 2\n      if (nextPartInfo?.part === 2 && currentQuestionIndex + 1 === currentTest.testStructure.part1.questions.length) {\n        setCurrentPart(2);\n      } else if (nextPartInfo?.part === 3 && !currentPart === 3) {\n        setCurrentPart(3);\n      }\n\n      setCurrentQuestionIndex(nextIndex);\n    }\n  };\n\n  const goPrev = () => {\n    if (currentQuestionIndex > 0) {\n      const prevIndex = currentQuestionIndex - 1;\n      setCurrentQuestionIndex(prevIndex);\n\n      // Update current part\n      const partInfo = getCurrentPartInfo();\n      if (partInfo) {\n        setCurrentPart(partInfo.part);\n      }\n    }\n  };\n\n  // Submit test\n  const submitTest = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"/api/analyze-batch\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          testId: currentTest.testId,\n          questions: currentTest.allQuestions.map(q => q.prompt),\n          answers,\n          audioFeatures,\n          testType: \"IELTS_AUTHENTIC\"\n        }),\n      });\n\n      if (!response.ok) throw new Error(`Server error: ${response.status}`);\n\n      const data = await response.json();\n      setFeedbacks(data.feedbacks);\n      setTestSummary(data.testSummary);\n      setShowResults(true);\n    } catch (err) {\n      console.error(\"Analysis error:\", err);\n      setError(\"Error during analysis. Please check your connection and try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset test\n  const resetTest = () => {\n    const newTest = createIELTSTest();\n    setCurrentTest(newTest);\n    setAnswers(Array(newTest.totalQuestions).fill(\"\"));\n    setCurrentQuestionIndex(0);\n    setCurrentPart(1);\n    setFeedbacks(null);\n    setTestSummary(null);\n    setShowResults(false);\n    setError(null);\n    setRecordingTime(0);\n    setPreparationTime(0);\n    setIsPreparingPart2(false);\n    setPreparationNotes(\"\");\n    setAutoStartRecording(false);\n    if (pronunciationAnalyzer) pronunciationAnalyzer.reset();\n  };\n\n  // Get band color\n  const getBandColor = (band) => {\n    if (band >= 8.5) return \"#2e7d32\";\n    if (band >= 7) return \"#388e3c\";\n    if (band >= 6.5) return \"#689f38\";\n    if (band >= 6) return \"#afb42b\";\n    if (band >= 5.5) return \"#f57f17\";\n    if (band >= 5) return \"#ff8f00\";\n    if (band >= 4) return \"#d32f2f\";\n    return \"#d32f2f\";\n  };\n\n  // Loading state\n  if (!isComponentReady) {\n    return (\n      <div className=\"loading-container\">\n        <h2>Loading IELTS Speaking Test...</h2>\n        {initializationError ? (\n          <div className=\"error-message\">\n            <p>{initializationError}</p>\n          </div>\n        ) : (\n          <p>Setting up authentic IELTS format with auto-recording...</p>\n        )}\n      </div>\n    );\n  }\n\n  // Get current question and part info\n  const currentQuestion = currentTest.allQuestions[currentQuestionIndex];\n  const currentPartInfo = getCurrentPartInfo();\n\n  // Results view\n// Results view\nif (showResults) {\n  // ✅ NEW: Prevent crash if testSummary is null\n  if (!testSummary) {\n    return (\n      <div className=\"results-container\">\n        <h2>IELTS Speaking Test Results</h2>\n        <p className=\"error-message\">No test summary data available. Please try again.</p>\n        <button onClick={resetTest} className=\"btn-primary TakeAnother\">\n          Take Another Test\n        </button>\n      </div>\n    );\n  }\n\n  const improvementData = [\n    { name: \"Fluency & Coherence\", value: testSummary.fluency },\n    { name: \"Lexical Resource\", value: testSummary.lexical },\n    { name: \"Grammatical Range & Accuracy\", value: testSummary.grammar },\n    { name: \"Pronunciation\", value: testSummary.pronunciation },\n  ];\n\n  const COLORS = improvementData.map((item) => getBandColor(item.value));\n\n  return (\n    <div className=\"results-container\">\n      <h2>IELTS Speaking Test Results</h2>\n\n      <div className=\"test-summary\">\n        <h3>Overall Performance</h3>\n        <div className=\"band-scores-grid\">\n          <div className=\"band-score\">\n            <span>Fluency & Coherence</span>\n            <span style={{ color: getBandColor(testSummary.fluency) }}>\n              {testSummary.fluency}\n            </span>\n          </div>\n          <div className=\"band-score\">\n            <span>Lexical Resource</span>\n            <span style={{ color: getBandColor(testSummary.lexical) }}>\n              {testSummary.lexical}\n            </span>\n          </div>\n          <div className=\"band-score\">\n            <span>Grammatical Range & Accuracy</span>\n            <span style={{ color: getBandColor(testSummary.grammar) }}>\n              {testSummary.grammar}\n            </span>\n          </div>\n          <div className=\"band-score\">\n            <span>Pronunciation</span>\n            <span style={{ color: getBandColor(testSummary.pronunciation) }}>\n              {testSummary.pronunciation}\n            </span>\n          </div>\n          <div className=\"band-score overall\">\n            <span>Overall Band Score</span>\n            <span>{testSummary.overall}</span>\n          </div>\n        </div>\n\n      </div>\n\n      <div className=\"detailed-feedback\">\n  <h3>Detailed Question-by-Question Feedback</h3>\n  {feedbacks.map((feedback, index) => (\n    <details key={index} className=\"feedback-section\" open={index === 0}>\n      <summary\n  className={index === 0 ? \"feedback-summary overall-summary\" : \"feedback-summary\"}\n  style={index === 0 ? { color: testSummary?.overall >= 5 ? \"#2e7d32\" : \"#d32f2f\" } : {}}\n>\n  {index === 0 ? \"Overall Performance\" : `Question ${index} Feedback`}\n</summary>\n      <pre>{feedback.feedback}</pre>\n    </details>\n  ))}\n</div>\n\n\n      <div className=\"nav-buttons\">\n        <button onClick={resetTest} className=\"btn-primary TakeAnother\">\n          Take Another Test\n        </button>\n      </div>\n    </div>\n  );\n}\n  return (\n    <div className=\"speech-evaluator\">\n      {/* Test Header */}\n      <div className=\"test-header\">\n        <div className=\"test-info\">\n          <span className=\"progress\">Question {currentQuestionIndex + 1} of {currentTest.totalQuestions}</span>\n        </div>\n        <div className=\"progress-bar\">\n          <div \n            className=\"progress-fill\" \n            style={{width: `${(currentQuestionIndex / currentTest.totalQuestions) * 100}%`}}\n          ></div>\n        </div>\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"error-message\">\n          <p>{error}</p>\n        </div>\n      )}\n\n      {/* Test Content */}\n      <div className=\"test-content\">\n        {/* Part Indicator */}\n        <div className=\"part-indicator\">\n          <h2>{currentPartInfo?.info.name}</h2>\n          <p className=\"part-duration\">Duration: {currentPartInfo?.info.duration}</p>\n          {currentPartInfo?.part === 1 && (\n            <p className=\"part-description\">\n              Topics: {currentPartInfo.info.topics.join(\" & \")} ({currentPartInfo.info.questions.length} questions)\n            </p>\n          )}\n          {currentPartInfo?.part === 2 && (\n            <p className=\"part-description\">\n              📝 1-minute preparation → 🎤 Auto-recording starts → 🗣️ Speak for 1-2 minutes\n            </p>\n          )}\n          {currentPartInfo?.part === 3 && (\n            <p className=\"part-description\">\n              Theme: {currentPartInfo.info.theme} ({currentPartInfo.info.questions.length} questions)\n            </p>\n          )}\n        </div>\n\n        {/* Part 2 Preparation Phase - Show button when not preparing */}\n        {currentPartInfo?.part === 2 && !isPreparingPart2 && preparationTime === 0 && !recording && (\n          <div className=\"part2-preparation-intro\">\n            <h3>📝 Part 2: Preparation Phase</h3>\n            <p>Click the button below to see your cue card and start the 1-minute preparation timer.</p>\n            <p>After preparation ends, recording will start automatically.</p>\n            <button onClick={startPart2Preparation} className=\"btn-primary\">\n              Start Preparation (1 minute)\n            </button>\n          </div>\n        )}\n\n        {/* Part 2 Cue Card - Show only during preparation */}\n        {currentPartInfo?.part === 2 && isPreparingPart2 && (\n          <div className=\"preparation-phase\">\n            <h3>⏱️ Preparation Time Remaining: {formatTime(preparationTime)}</h3>\n            {preparationTime <= 5 && (\n              <div className=\"countdown-warning\">\n                <p className=\"auto-start-notice\">🎤 Recording will start automatically when timer reaches 0:00</p>\n              </div>\n            )}\n            <div className=\"cue-card\">\n              <h4>{currentQuestion.cueCard.mainPrompt}</h4>\n              <p>You should say:</p>\n              <ul>\n                {currentQuestion.cueCard.bulletPoints.map((point, index) => (\n                  <li key={index}>{point}</li>\n                ))}\n              </ul>\n            </div>\n            \n            <div className=\"preparation-notes\">\n              <label htmlFor=\"prep-notes\">📝 Your preparation notes (optional):</label>\n              <textarea\n                id=\"prep-notes\"\n                value={preparationNotes}\n                onChange={(e) => setPreparationNotes(e.target.value)}\n                placeholder=\"Jot down key points here...\"\n                rows=\"4\"\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Part 2 Recording Phase - Show only when recording */}\n        {currentPartInfo?.part === 2 && recording && (\n          <div className=\"recording-section\">\n            <div className=\"auto-recording-status\">\n              <span className=\"recording-indicator\">🔴 Recording</span>\n              <span className=\"recording-time\">Time: {formatTime(recordingTime)}</span>\n            </div>\n            <p className=\"recording-instruction\">Speak for 1-2 minutes covering all the points mentioned in the cue card.</p>\n            <button onClick={stopRecording} className=\"record-button recording\">\n              ⏹️ Stop Recording\n            </button>\n          </div>\n        )}\n\n        {/* Regular Question Section for Parts 1 & 3 */}\n        {currentPartInfo?.part !== 2 && (\n          <>\n            <div className=\"question-section\">\n              <div className=\"question-header\">\n                <span className=\"question-number\">Question {currentQuestionIndex + 1}</span>\n                <span className=\"topic-badge\">{currentQuestion.topicName || currentQuestion.category}</span>\n              </div>\n              <div className=\"question-content\">\n                <h3>{currentQuestion.prompt}</h3>\n                <div className=\"duration-guide\">\n                  <span>⏱️ Expected duration: 20-30 seconds</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Recording Controls for Parts 1 & 3 */}\n            <div className=\"recording-section\">\n              <div className=\"recording-controls\">\n                {!recording ? (\n                  <button onClick={startRecording} className=\"record-button\">\n                    🎤 Start Recording\n                  </button>\n                ) : (\n                  <>\n                    <p>You may now begin speaking. Recording time: <strong>{formatTime(recordingTime)}</strong></p>\n                    <button onClick={stopRecording} className=\"record-button recording\">\n                      ⏹️ Stop Recording\n                    </button>\n                  </>\n                )}\n              </div>\n            </div>\n          </>\n        )}\n\n        {/* Answer Section */}\n        <div className=\"answer-section\">\n          <label htmlFor=\"answer\">Your transcribed answer:</label>\n          <textarea\n            id=\"answer\"\n            value={answers[currentQuestionIndex] || \"\"}\n            onChange={(e) => {\n              const newAnswers = [...answers];\n              newAnswers[currentQuestionIndex] = e.target.value;\n              setAnswers(newAnswers);\n            }}\n            disabled={recording}\n            placeholder=\"Your answer will appear here during recording...\"\n          />\n          \n          {currentPartInfo?.part === 2 && preparationNotes && (\n            <div className=\"notes-reference\">\n              <h4>Your preparation notes:</h4>\n              <p>{preparationNotes}</p>\n            </div>\n          )}\n        </div>\n\n        {/* Navigation Section */}\n        <div className=\"navigation-section\">\n          <div className=\"nav-buttons\">\n            <button \n              onClick={goPrev} \n              disabled={currentQuestionIndex === 0}\n              className=\"btn-secondary\"\n            >\n              ← Previous\n            </button>\n            \n            <div className=\"progress-info\">\n              <p><strong>Part 1:</strong> {currentTest.testStructure.part1.questions.length} questions | \n                 <strong> Part 2:</strong> 1 cue card (auto-record) | \n                 <strong> Part 3:</strong> {currentTest.testStructure.part3.questions.length} questions</p>\n              <p>Progress: {answers.filter(a => a.trim().length > 0).length} / {currentTest.totalQuestions} questions answered</p>\n            </div>\n\n           {currentQuestionIndex < currentTest.totalQuestions - 1 ? (\n  <button onClick={goNext} className=\"btn-primary\">Next →</button>\n) : (\n  <button\n    onClick={submitTest}\n    disabled={loading || recording}\n    className=\"btn-success\"\n  >\n    {loading ? \"Analyzing...\" : \"Submit Test\"}\n  </button>\n)}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SpeechEvaluator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}