{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\ielts-speech-evaluator\\\\src\\\\components\\\\SpeechEvaluator.jsx\",\n  _s = $RefreshSig$();\n// Enhanced SpeechEvaluator.jsx - Final version with improved results page\n\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport questionBank from \"../data/questions-corrected\";\nimport './SpeechEvaluator.css';\nimport { jsPDF } from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\njsPDF.API.autoTable = autoTable;\n\n// Function to create authentic IELTS test structure (same as before)\nconst createIELTSTest = () => {\n  const availableTopics = [...questionBank.part1Topics];\n  const shuffledTopics = availableTopics.sort(() => Math.random() - 0.5);\n  const introTopic = shuffledTopics[0];\n  const introQuestions = [...introTopic.questions].sort(() => Math.random() - 0.5).slice(0, 2);\n  const secondTopic = shuffledTopics[1];\n  const secondQuestions = [...secondTopic.questions].sort(() => Math.random() - 0.5).slice(0, Math.random() > 0.5 ? 2 : 3);\n  let part1Questions = [];\n  introQuestions.forEach(q => {\n    part1Questions.push({\n      ...q,\n      topicName: introTopic.topicName,\n      part: 1,\n      expectedDuration: 30\n    });\n  });\n  secondQuestions.forEach(q => {\n    part1Questions.push({\n      ...q,\n      topicName: secondTopic.topicName,\n      part: 1,\n      expectedDuration: 30\n    });\n  });\n  const cueCards = [...questionBank.part2CueCards];\n  const selectedCueCard = cueCards[Math.floor(Math.random() * cueCards.length)];\n  const part2Question = {\n    ...selectedCueCard,\n    part: 2,\n    expectedDuration: 120,\n    preparationTime: 60\n  };\n  const relatedDiscussion = questionBank.part3Discussions.find(disc => disc.relatedToPart2 === selectedCueCard.id);\n  let part3Questions = [];\n  if (relatedDiscussion) {\n    const shuffledDiscQuestions = [...relatedDiscussion.questions].sort(() => Math.random() - 0.5);\n    const numQuestions = Math.floor(Math.random() * 3) + 4;\n    part3Questions = shuffledDiscQuestions.slice(0, numQuestions).map(q => ({\n      ...q,\n      part: 3,\n      topicTheme: relatedDiscussion.topicTheme,\n      expectedDuration: 60\n    }));\n  }\n  return {\n    testId: `ielts_test_${Date.now()}`,\n    title: `IELTS Speaking Test - ${new Date().toLocaleDateString()}`,\n    testStructure: {\n      part1: {\n        name: \"Part 1: Introduction & Interview\",\n        duration: \"4-5 minutes\",\n        questions: part1Questions,\n        topics: [introTopic.topicName, secondTopic.topicName]\n      },\n      part2: {\n        name: \"Part 2: Individual Long Turn\",\n        duration: \"3-4 minutes\",\n        question: part2Question,\n        cueCard: selectedCueCard.cueCard\n      },\n      part3: {\n        name: \"Part 3: Two-way Discussion\",\n        duration: \"4-5 minutes\",\n        questions: part3Questions,\n        theme: (relatedDiscussion === null || relatedDiscussion === void 0 ? void 0 : relatedDiscussion.topicTheme) || \"General Discussion\"\n      }\n    },\n    allQuestions: [...part1Questions.map(q => ({\n      ...q,\n      prompt: q.prompt\n    })), {\n      ...part2Question,\n      prompt: part2Question.cueCard.mainPrompt\n    }, ...part3Questions.map(q => ({\n      ...q,\n      prompt: q.prompt\n    }))],\n    totalQuestions: part1Questions.length + 1 + part3Questions.length\n  };\n};\n\n// SpeechEvaluator Component\nfunction SpeechEvaluator() {\n  _s();\n  const [currentTest, setCurrentTest] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [currentPart, setCurrentPart] = useState(1);\n  const [answers, setAnswers] = useState([]);\n  const [recording, setRecording] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [feedbacks, setFeedbacks] = useState(null);\n  const [testSummary, setTestSummary] = useState(null);\n  const [error, setError] = useState(null);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const [preparationTime, setPreparationTime] = useState(0);\n  const [isPreparingPart2, setIsPreparingPart2] = useState(false);\n  const [preparationNotes, setPreparationNotes] = useState(\"\");\n  const [autoStartRecording, setAutoStartRecording] = useState(false);\n  const [isAnalyzingPronunciation, setIsAnalyzingPronunciation] = useState(false);\n  const [audioFeatures, setAudioFeatures] = useState({});\n  const recognitionRef = useRef(null);\n  const recordingTimerRef = useRef(null);\n  const preparationTimerRef = useRef(null);\n  const currentStreamRef = useRef(null);\n  const [pronunciationAnalyzer, setPronunciationAnalyzer] = useState(null);\n  useEffect(() => {\n    const initializeComponent = async () => {\n      try {\n        const test = createIELTSTest();\n        setCurrentTest(test);\n        setAnswers(Array(test.totalQuestions).fill(\"\"));\n        const analyzer = new SimplePronunciationAnalyzer();\n        setPronunciationAnalyzer(analyzer);\n      } catch (error) {\n        setError(\"Failed to initialize speech evaluator. Please refresh the page.\");\n      }\n    };\n    initializeComponent();\n  }, []);\n  useEffect(() => {\n    return () => {\n      if (recordingTimerRef.current) clearInterval(recordingTimerRef.current);\n      if (preparationTimerRef.current) clearInterval(preparationTimerRef.current);\n      if (currentStreamRef.current) {\n        currentStreamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (pronunciationAnalyzer) {\n        pronunciationAnalyzer.stopAnalysis();\n      }\n    };\n  }, [pronunciationAnalyzer]);\n  useEffect(() => {\n    if (autoStartRecording && !isPreparingPart2 && preparationTime === 0) {\n      const timeout = setTimeout(() => {\n        startRecording();\n        setAutoStartRecording(false);\n      }, 500);\n      return () => clearTimeout(timeout);\n    }\n  }, [autoStartRecording, isPreparingPart2, preparationTime]);\n  const formatTime = useCallback(seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, \"0\")}`;\n  }, []);\n  const getCurrentPartInfo = () => {\n    if (!currentTest) return null;\n    const part1Length = currentTest.testStructure.part1.questions.length;\n    const part2Index = part1Length;\n    if (currentQuestionIndex < part1Length) return {\n      part: 1,\n      info: currentTest.testStructure.part1\n    };\n    if (currentQuestionIndex === part2Index) return {\n      part: 2,\n      info: currentTest.testStructure.part2\n    };\n    return {\n      part: 3,\n      info: currentTest.testStructure.part3\n    };\n  };\n  const startPart2Preparation = () => {\n    setIsPreparingPart2(true);\n    setPreparationNotes(\"\");\n    startPreparationTimer();\n  };\n  const startPreparationTimer = () => {\n    setPreparationTime(60);\n    setAutoStartRecording(true);\n    preparationTimerRef.current = setInterval(() => {\n      setPreparationTime(prev => {\n        if (prev <= 1) {\n          clearInterval(preparationTimerRef.current);\n          setIsPreparingPart2(false);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const startRecordingTimer = () => {\n    setRecordingTime(0);\n    recordingTimerRef.current = setInterval(() => {\n      setRecordingTime(prev => prev + 1);\n    }, 1000);\n  };\n  const stopRecordingTimer = () => {\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n      recordingTimerRef.current = null;\n    }\n  };\n  const startRecording = async () => {\n    if (!(\"webkitSpeechRecognition\" in window) && !(\"SpeechRecognition\" in window)) {\n      setError(\"Speech recognition is not supported in this browser. Please use Chrome or Edge.\");\n      return;\n    }\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: false\n        }\n      });\n      currentStreamRef.current = stream;\n      if (pronunciationAnalyzer && pronunciationAnalyzer.audioContext) {\n        try {\n          pronunciationAnalyzer.reset();\n          await pronunciationAnalyzer.startAnalysis(stream);\n          setIsAnalyzingPronunciation(true);\n        } catch {}\n      }\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      recognition.lang = \"en-US\";\n      recognition.continuous = true;\n      recognition.interimResults = false;\n      recognition.onstart = () => {\n        setRecording(true);\n        setError(null);\n        startRecordingTimer();\n      };\n      recognition.onresult = event => {\n        const speechText = Array.from(event.results).map(result => result[0].transcript).join(\" \");\n        setAnswers(prev => {\n          const newAnswers = [...prev];\n          newAnswers[currentQuestionIndex] = speechText.trim();\n          return newAnswers;\n        });\n      };\n      recognition.onend = () => {\n        setRecording(false);\n        stopRecordingTimer();\n      };\n      recognition.onerror = event => {\n        setError(`Speech recognition error: ${event.error}. Please try again.`);\n        setRecording(false);\n        stopRecordingTimer();\n        setIsAnalyzingPronunciation(false);\n      };\n      recognitionRef.current = recognition;\n      recognition.start();\n    } catch (err) {\n      setError(\"Failed to access microphone. Please check permissions and try again.\");\n    }\n  };\n  const stopRecording = () => {\n    var _recognitionRef$curre;\n    (_recognitionRef$curre = recognitionRef.current) === null || _recognitionRef$curre === void 0 ? void 0 : _recognitionRef$curre.stop();\n    if (pronunciationAnalyzer && isAnalyzingPronunciation) {\n      pronunciationAnalyzer.stopAnalysis();\n      const features = pronunciationAnalyzer.getFeatures();\n      setAudioFeatures(prev => ({\n        ...prev,\n        [currentQuestionIndex]: features\n      }));\n      setIsAnalyzingPronunciation(false);\n    }\n    if (currentStreamRef.current) {\n      currentStreamRef.current.getTracks().forEach(track => track.stop());\n    }\n    setTimeout(goNext, 1500); // auto advance with delay\n  };\n  const goNext = () => {\n    if (currentQuestionIndex < currentTest.totalQuestions - 1) {\n      const nextIndex = currentQuestionIndex + 1;\n      const nextPartInfo = getCurrentPartInfo();\n      if ((nextPartInfo === null || nextPartInfo === void 0 ? void 0 : nextPartInfo.part) === 2 && nextIndex === currentTest.testStructure.part1.questions.length) {\n        setCurrentPart(2);\n      } else if ((nextPartInfo === null || nextPartInfo === void 0 ? void 0 : nextPartInfo.part) === 3 && currentPart !== 3) {\n        setCurrentPart(3);\n      }\n      setCurrentQuestionIndex(nextIndex);\n    }\n  };\n  const goPrev = () => {\n    if (currentQuestionIndex > 0) {\n      const prevIndex = currentQuestionIndex - 1;\n      setCurrentQuestionIndex(prevIndex);\n      const partInfo = getCurrentPartInfo();\n      if (partInfo) setCurrentPart(partInfo.part);\n    }\n  };\n  const submitTest = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"/api/analyze-batch\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          testId: currentTest.testId,\n          questions: currentTest.allQuestions.map(q => q.prompt),\n          answers,\n          audioFeatures,\n          testType: \"IELTS_AUTHENTIC\"\n        })\n      });\n      if (!response.ok) throw new Error(`Server error: ${response.status}`);\n      const data = await response.json();\n      setFeedbacks(data.feedbacks);\n      setTestSummary(data.testSummary);\n      setShowResults(true);\n    } catch (err) {\n      setError(\"Error during analysis. Please check your connection and try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetTest = () => {\n    const newTest = createIELTSTest();\n    setCurrentTest(newTest);\n    setAnswers(Array(newTest.totalQuestions).fill(\"\"));\n    setCurrentQuestionIndex(0);\n    setCurrentPart(1);\n    setFeedbacks(null);\n    setTestSummary(null);\n    setShowResults(false);\n    setError(null);\n    setRecordingTime(0);\n    setPreparationTime(0);\n    setIsPreparingPart2(false);\n    setPreparationNotes(\"\");\n    setAutoStartRecording(false);\n    if (pronunciationAnalyzer) pronunciationAnalyzer.reset();\n  };\n\n  // Generate and download PDF certificate\n  const downloadCertificate = () => {\n    if (!testSummary || !currentTest) return;\n    const doc = new jsPDF();\n    doc.setFontSize(20);\n    doc.text(\"IELTS Speaking Test Certificate\", 20, 30);\n    doc.setFontSize(12);\n    doc.text(`Candidate Name: ____________________________`, 20, 50);\n    const testDate = new Date(currentTest.testId.replace(\"ielts_test_\", \"\"));\n    doc.text(`Test Date: ${testDate.toLocaleDateString()}`, 20, 65);\n    doc.autoTable({\n      startY: 75,\n      head: [[\"Skill\", \"Band Score\"]],\n      body: [[\"Fluency & Coherence\", testSummary.fluency || \"-\"], [\"Lexical Resource\", testSummary.lexical || \"-\"], [\"Grammar Range & Accuracy\", testSummary.grammar || \"-\"], [\"Pronunciation\", testSummary.pronunciation || \"-\"], [\"Overall Band Score\", testSummary.overall || \"-\"]]\n    });\n    doc.text(\"Congratulations! You have completed the IELTS Speaking Test.\", 20, doc.lastAutoTable.finalY + 30);\n    doc.text(\"Signature: ___________________\", 20, doc.lastAutoTable.finalY + 50);\n    doc.save(`IELTS_Test_Certificate_${testDate.toISOString()}.pdf`);\n  };\n  if (!isComponentReady) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading IELTS Speaking Test...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this), error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 18\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Setting up authentic IELTS format with auto-recording...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 72\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }, this);\n  }\n  if (showResults) {\n    // Part 1 length for feedback partitioning\n    const part1Len = currentTest.testStructure.part1.questions.length;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-summary panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"IELTS Speaking Test Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"band-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"band-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Fluency & Coherence\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: getBandColor(testSummary === null || testSummary === void 0 ? void 0 : testSummary.fluency)\n              },\n              children: [(testSummary === null || testSummary === void 0 ? void 0 : testSummary.fluency) || \"-\", \" / 9\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"band-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Lexical Resource\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: getBandColor(testSummary === null || testSummary === void 0 ? void 0 : testSummary.lexical)\n              },\n              children: [(testSummary === null || testSummary === void 0 ? void 0 : testSummary.lexical) || \"-\", \" / 9\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"band-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Grammar Accuracy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: getBandColor(testSummary === null || testSummary === void 0 ? void 0 : testSummary.grammar)\n              },\n              children: [(testSummary === null || testSummary === void 0 ? void 0 : testSummary.grammar) || \"-\", \" / 9\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"band-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Pronunciation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: getBandColor(testSummary === null || testSummary === void 0 ? void 0 : testSummary.pronunciation)\n              },\n              children: [(testSummary === null || testSummary === void 0 ? void 0 : testSummary.pronunciation) || \"-\", \" / 9\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"band-item overall\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Overall Band Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [(testSummary === null || testSummary === void 0 ? void 0 : testSummary.overall) || \"-\", \"/9\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-actions panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: downloadCertificate,\n          className: \"btn-primary\",\n          children: \"\\uD83D\\uDCC4 Download Certificate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetTest,\n          className: \"btn-secondary\",\n          children: \"\\uD83D\\uDD04 Retake Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"detailed-feedback panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Detailed Question-by-Question Feedback\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this), feedbacks.map((fb, idx) => {\n          const part1Len = currentTest.testStructure.part1.questions.length;\n          const part = idx < part1Len ? 1 : idx === part1Len ? 2 : 3;\n          return /*#__PURE__*/_jsxDEV(\"details\", {\n            className: \"feedback-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n              children: [\"Question \", idx + 1, \" (Part \", part, \") \\u2013 Overall: \", fb.overall || \"-\", \" / 9\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n              children: fb.feedback\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 17\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Normal UI for the test (Parts 1-3) goes here; omitted for brevity\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"speech-evaluator\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 467,\n    columnNumber: 5\n  }, this);\n}\n_s(SpeechEvaluator, \"95wl3ifXN6acbVPH0As/yz0dQYM=\");\n_c = SpeechEvaluator;\nexport default SpeechEvaluator;\nvar _c;\n$RefreshReg$(_c, \"SpeechEvaluator\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","questionBank","jsPDF","autoTable","jsxDEV","_jsxDEV","API","createIELTSTest","availableTopics","part1Topics","shuffledTopics","sort","Math","random","introTopic","introQuestions","questions","slice","secondTopic","secondQuestions","part1Questions","forEach","q","push","topicName","part","expectedDuration","cueCards","part2CueCards","selectedCueCard","floor","length","part2Question","preparationTime","relatedDiscussion","part3Discussions","find","disc","relatedToPart2","id","part3Questions","shuffledDiscQuestions","numQuestions","map","topicTheme","testId","Date","now","title","toLocaleDateString","testStructure","part1","name","duration","topics","part2","question","cueCard","part3","theme","allQuestions","prompt","mainPrompt","totalQuestions","SpeechEvaluator","_s","currentTest","setCurrentTest","currentQuestionIndex","setCurrentQuestionIndex","currentPart","setCurrentPart","answers","setAnswers","recording","setRecording","loading","setLoading","feedbacks","setFeedbacks","testSummary","setTestSummary","error","setError","recordingTime","setRecordingTime","showResults","setShowResults","setPreparationTime","isPreparingPart2","setIsPreparingPart2","preparationNotes","setPreparationNotes","autoStartRecording","setAutoStartRecording","isAnalyzingPronunciation","setIsAnalyzingPronunciation","audioFeatures","setAudioFeatures","recognitionRef","recordingTimerRef","preparationTimerRef","currentStreamRef","pronunciationAnalyzer","setPronunciationAnalyzer","initializeComponent","test","Array","fill","analyzer","SimplePronunciationAnalyzer","current","clearInterval","getTracks","track","stop","stopAnalysis","timeout","setTimeout","startRecording","clearTimeout","formatTime","seconds","mins","secs","toString","padStart","getCurrentPartInfo","part1Length","part2Index","info","startPart2Preparation","startPreparationTimer","setInterval","prev","startRecordingTimer","stopRecordingTimer","window","stream","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","audioContext","reset","startAnalysis","SpeechRecognition","webkitSpeechRecognition","recognition","lang","continuous","interimResults","onstart","onresult","event","speechText","from","results","result","transcript","join","newAnswers","trim","onend","onerror","start","err","stopRecording","_recognitionRef$curre","features","getFeatures","goNext","nextIndex","nextPartInfo","goPrev","prevIndex","partInfo","submitTest","response","fetch","method","headers","body","JSON","stringify","testType","ok","Error","status","data","json","resetTest","newTest","downloadCertificate","doc","setFontSize","text","testDate","replace","startY","head","fluency","lexical","grammar","pronunciation","overall","lastAutoTable","finalY","save","toISOString","isComponentReady","className","children","fileName","_jsxFileName","lineNumber","columnNumber","part1Len","style","color","getBandColor","onClick","fb","idx","feedback","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/ielts-speech-evaluator/src/components/SpeechEvaluator.jsx"],"sourcesContent":["// Enhanced SpeechEvaluator.jsx - Final version with improved results page\n\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport questionBank from \"../data/questions-corrected\";\nimport './SpeechEvaluator.css';\nimport { jsPDF } from \"jspdf\";\nimport autoTable from \"jspdf-autotable\";\n\njsPDF.API.autoTable = autoTable;\n\n// Function to create authentic IELTS test structure (same as before)\nconst createIELTSTest = () => {\n  const availableTopics = [...questionBank.part1Topics];\n  const shuffledTopics = availableTopics.sort(() => Math.random() - 0.5);\n\n  const introTopic = shuffledTopics[0];\n  const introQuestions = [...introTopic.questions]\n    .sort(() => Math.random() - 0.5)\n    .slice(0, 2);\n\n  const secondTopic = shuffledTopics[1];\n  const secondQuestions = [...secondTopic.questions]\n    .sort(() => Math.random() - 0.5)\n    .slice(0, Math.random() > 0.5 ? 2 : 3);\n\n  let part1Questions = [];\n  introQuestions.forEach(q => {\n    part1Questions.push({\n      ...q,\n      topicName: introTopic.topicName,\n      part: 1,\n      expectedDuration: 30\n    });\n  });\n  secondQuestions.forEach(q => {\n    part1Questions.push({\n      ...q,\n      topicName: secondTopic.topicName,\n      part: 1,\n      expectedDuration: 30\n    });\n  });\n\n  const cueCards = [...questionBank.part2CueCards];\n  const selectedCueCard = cueCards[Math.floor(Math.random() * cueCards.length)];\n  const part2Question = {\n    ...selectedCueCard,\n    part: 2,\n    expectedDuration: 120,\n    preparationTime: 60\n  };\n\n  const relatedDiscussion = questionBank.part3Discussions.find(\n    disc => disc.relatedToPart2 === selectedCueCard.id\n  );\n  let part3Questions = [];\n  if (relatedDiscussion) {\n    const shuffledDiscQuestions = [...relatedDiscussion.questions].sort(() => Math.random() - 0.5);\n    const numQuestions = Math.floor(Math.random() * 3) + 4;\n    part3Questions = shuffledDiscQuestions.slice(0, numQuestions).map(q => ({\n      ...q,\n      part: 3,\n      topicTheme: relatedDiscussion.topicTheme,\n      expectedDuration: 60\n    }));\n  }\n\n  return {\n    testId: `ielts_test_${Date.now()}`,\n    title: `IELTS Speaking Test - ${new Date().toLocaleDateString()}`,\n    testStructure: {\n      part1: {\n        name: \"Part 1: Introduction & Interview\",\n        duration: \"4-5 minutes\",\n        questions: part1Questions,\n        topics: [introTopic.topicName, secondTopic.topicName]\n      },\n      part2: {\n        name: \"Part 2: Individual Long Turn\",\n        duration: \"3-4 minutes\",\n        question: part2Question,\n        cueCard: selectedCueCard.cueCard\n      },\n      part3: {\n        name: \"Part 3: Two-way Discussion\",\n        duration: \"4-5 minutes\",\n        questions: part3Questions,\n        theme: relatedDiscussion?.topicTheme || \"General Discussion\"\n      }\n    },\n    allQuestions: [\n      ...part1Questions.map(q => ({ ...q, prompt: q.prompt })),\n      { ...part2Question, prompt: part2Question.cueCard.mainPrompt },\n      ...part3Questions.map(q => ({ ...q, prompt: q.prompt }))\n    ],\n    totalQuestions: part1Questions.length + 1 + part3Questions.length\n  };\n};\n\n// SpeechEvaluator Component\nfunction SpeechEvaluator() {\n  const [currentTest, setCurrentTest] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [currentPart, setCurrentPart] = useState(1);\n  const [answers, setAnswers] = useState([]);\n  const [recording, setRecording] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [feedbacks, setFeedbacks] = useState(null);\n  const [testSummary, setTestSummary] = useState(null);\n  const [error, setError] = useState(null);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const [preparationTime, setPreparationTime] = useState(0);\n  const [isPreparingPart2, setIsPreparingPart2] = useState(false);\n  const [preparationNotes, setPreparationNotes] = useState(\"\");\n  const [autoStartRecording, setAutoStartRecording] = useState(false);\n  const [isAnalyzingPronunciation, setIsAnalyzingPronunciation] = useState(false);\n  const [audioFeatures, setAudioFeatures] = useState({});\n\n  const recognitionRef = useRef(null);\n  const recordingTimerRef = useRef(null);\n  const preparationTimerRef = useRef(null);\n  const currentStreamRef = useRef(null);\n  const [pronunciationAnalyzer, setPronunciationAnalyzer] = useState(null);\n\n  useEffect(() => {\n    const initializeComponent = async () => {\n      try {\n        const test = createIELTSTest();\n        setCurrentTest(test);\n        setAnswers(Array(test.totalQuestions).fill(\"\"));\n        const analyzer = new SimplePronunciationAnalyzer();\n        setPronunciationAnalyzer(analyzer);\n      } catch (error) {\n        setError(\"Failed to initialize speech evaluator. Please refresh the page.\");\n      }\n    };\n    initializeComponent();\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      if (recordingTimerRef.current) clearInterval(recordingTimerRef.current);\n      if (preparationTimerRef.current) clearInterval(preparationTimerRef.current);\n      if (currentStreamRef.current) {\n        currentStreamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (pronunciationAnalyzer) {\n        pronunciationAnalyzer.stopAnalysis();\n      }\n    };\n  }, [pronunciationAnalyzer]);\n\n  useEffect(() => {\n    if (autoStartRecording && !isPreparingPart2 && preparationTime === 0) {\n      const timeout = setTimeout(() => {\n        startRecording();\n        setAutoStartRecording(false);\n      }, 500);\n      return () => clearTimeout(timeout);\n    }\n  }, [autoStartRecording, isPreparingPart2, preparationTime]);\n\n  const formatTime = useCallback(seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, \"0\")}`;\n  }, []);\n\n  const getCurrentPartInfo = () => {\n    if (!currentTest) return null;\n    const part1Length = currentTest.testStructure.part1.questions.length;\n    const part2Index = part1Length;\n    if (currentQuestionIndex < part1Length) return { part: 1, info: currentTest.testStructure.part1 };\n    if (currentQuestionIndex === part2Index) return { part: 2, info: currentTest.testStructure.part2 };\n    return { part: 3, info: currentTest.testStructure.part3 };\n  };\n\n  const startPart2Preparation = () => {\n    setIsPreparingPart2(true);\n    setPreparationNotes(\"\");\n    startPreparationTimer();\n  };\n\n  const startPreparationTimer = () => {\n    setPreparationTime(60);\n    setAutoStartRecording(true);\n    preparationTimerRef.current = setInterval(() => {\n      setPreparationTime(prev => {\n        if (prev <= 1) {\n          clearInterval(preparationTimerRef.current);\n          setIsPreparingPart2(false);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  const startRecordingTimer = () => {\n    setRecordingTime(0);\n    recordingTimerRef.current = setInterval(() => {\n      setRecordingTime(prev => prev + 1);\n    }, 1000);\n  };\n\n  const stopRecordingTimer = () => {\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n      recordingTimerRef.current = null;\n    }\n  };\n\n  const startRecording = async () => {\n    if (!(\"webkitSpeechRecognition\" in window) && !(\"SpeechRecognition\" in window)) {\n      setError(\"Speech recognition is not supported in this browser. Please use Chrome or Edge.\");\n      return;\n    }\n\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: { echoCancellation: true, noiseSuppression: true, autoGainControl: false },\n      });\n      currentStreamRef.current = stream;\n\n      if (pronunciationAnalyzer && pronunciationAnalyzer.audioContext) {\n        try {\n          pronunciationAnalyzer.reset();\n          await pronunciationAnalyzer.startAnalysis(stream);\n          setIsAnalyzingPronunciation(true);\n        } catch {}\n      }\n\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      recognition.lang = \"en-US\";\n      recognition.continuous = true;\n      recognition.interimResults = false;\n\n      recognition.onstart = () => {\n        setRecording(true);\n        setError(null);\n        startRecordingTimer();\n      };\n\n      recognition.onresult = event => {\n        const speechText = Array.from(event.results)\n          .map(result => result[0].transcript)\n          .join(\" \");\n        setAnswers(prev => {\n          const newAnswers = [...prev];\n          newAnswers[currentQuestionIndex] = speechText.trim();\n          return newAnswers;\n        });\n      };\n\n      recognition.onend = () => {\n        setRecording(false);\n        stopRecordingTimer();\n      };\n\n      recognition.onerror = event => {\n        setError(`Speech recognition error: ${event.error}. Please try again.`);\n        setRecording(false);\n        stopRecordingTimer();\n        setIsAnalyzingPronunciation(false);\n      };\n\n      recognitionRef.current = recognition;\n      recognition.start();\n    } catch (err) {\n      setError(\"Failed to access microphone. Please check permissions and try again.\");\n    }\n  };\n\n  const stopRecording = () => {\n    recognitionRef.current?.stop();\n    if (pronunciationAnalyzer && isAnalyzingPronunciation) {\n      pronunciationAnalyzer.stopAnalysis();\n      const features = pronunciationAnalyzer.getFeatures();\n      setAudioFeatures(prev => ({ ...prev, [currentQuestionIndex]: features }));\n      setIsAnalyzingPronunciation(false);\n    }\n    if (currentStreamRef.current) {\n      currentStreamRef.current.getTracks().forEach(track => track.stop());\n    }\n    setTimeout(goNext, 1500); // auto advance with delay\n  };\n\n  const goNext = () => {\n    if (currentQuestionIndex < currentTest.totalQuestions - 1) {\n      const nextIndex = currentQuestionIndex + 1;\n      const nextPartInfo = getCurrentPartInfo();\n      if (nextPartInfo?.part === 2 && nextIndex === currentTest.testStructure.part1.questions.length) {\n        setCurrentPart(2);\n      } else if (nextPartInfo?.part === 3 && currentPart !== 3) {\n        setCurrentPart(3);\n      }\n      setCurrentQuestionIndex(nextIndex);\n    }\n  };\n\n  const goPrev = () => {\n    if (currentQuestionIndex > 0) {\n      const prevIndex = currentQuestionIndex - 1;\n      setCurrentQuestionIndex(prevIndex);\n      const partInfo = getCurrentPartInfo();\n      if (partInfo) setCurrentPart(partInfo.part);\n    }\n  };\n\n  const submitTest = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"/api/analyze-batch\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          testId: currentTest.testId,\n          questions: currentTest.allQuestions.map(q => q.prompt),\n          answers,\n          audioFeatures,\n          testType: \"IELTS_AUTHENTIC\",\n        }),\n      });\n      if (!response.ok) throw new Error(`Server error: ${response.status}`);\n      const data = await response.json();\n      setFeedbacks(data.feedbacks);\n      setTestSummary(data.testSummary);\n      setShowResults(true);\n    } catch (err) {\n      setError(\"Error during analysis. Please check your connection and try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetTest = () => {\n    const newTest = createIELTSTest();\n    setCurrentTest(newTest);\n    setAnswers(Array(newTest.totalQuestions).fill(\"\"));\n    setCurrentQuestionIndex(0);\n    setCurrentPart(1);\n    setFeedbacks(null);\n    setTestSummary(null);\n    setShowResults(false);\n    setError(null);\n    setRecordingTime(0);\n    setPreparationTime(0);\n    setIsPreparingPart2(false);\n    setPreparationNotes(\"\");\n    setAutoStartRecording(false);\n    if (pronunciationAnalyzer) pronunciationAnalyzer.reset();\n  };\n\n  // Generate and download PDF certificate\n  const downloadCertificate = () => {\n    if (!testSummary || !currentTest) return;\n    const doc = new jsPDF();\n    doc.setFontSize(20);\n    doc.text(\"IELTS Speaking Test Certificate\", 20, 30);\n\n    doc.setFontSize(12);\n    doc.text(`Candidate Name: ____________________________`, 20, 50);\n    const testDate = new Date(currentTest.testId.replace(\"ielts_test_\", \"\"));\n    doc.text(`Test Date: ${testDate.toLocaleDateString()}`, 20, 65);\n\n    doc.autoTable({\n      startY: 75,\n      head: [[\"Skill\", \"Band Score\"]],\n      body: [\n        [\"Fluency & Coherence\", testSummary.fluency || \"-\"],\n        [\"Lexical Resource\", testSummary.lexical || \"-\"],\n        [\"Grammar Range & Accuracy\", testSummary.grammar || \"-\"],\n        [\"Pronunciation\", testSummary.pronunciation || \"-\"],\n        [\"Overall Band Score\", testSummary.overall || \"-\"],\n      ],\n    });\n\n    doc.text(\"Congratulations! You have completed the IELTS Speaking Test.\", 20, doc.lastAutoTable.finalY + 30);\n    doc.text(\"Signature: ___________________\", 20, doc.lastAutoTable.finalY + 50);\n\n    doc.save(`IELTS_Test_Certificate_${testDate.toISOString()}.pdf`);\n  };\n\n  if (!isComponentReady) {\n    return (\n      <div className=\"loading-container\">\n        <h2>Loading IELTS Speaking Test...</h2>\n        {error ? <div className=\"error-message\"><p>{error}</p></div> : <p>Setting up authentic IELTS format with auto-recording...</p>}\n      </div>\n    );\n  }\n\n  if (showResults) {\n    // Part 1 length for feedback partitioning\n    const part1Len = currentTest.testStructure.part1.questions.length;\n\n    return (\n      <div className=\"results-container\">\n        <div className=\"results-summary panel\">\n          <h2>IELTS Speaking Test Results</h2>\n          <div className=\"band-grid\">\n            <div className=\"band-item\">\n              <strong>Fluency & Coherence</strong>\n              <span style={{ color: getBandColor(testSummary?.fluency) }}>\n                {testSummary?.fluency || \"-\"} / 9\n              </span>\n            </div>\n            <div className=\"band-item\">\n              <strong>Lexical Resource</strong>\n              <span style={{ color: getBandColor(testSummary?.lexical) }}>\n                {testSummary?.lexical || \"-\"} / 9\n              </span>\n            </div>\n            <div className=\"band-item\">\n              <strong>Grammar Accuracy</strong>\n              <span style={{ color: getBandColor(testSummary?.grammar) }}>\n                {testSummary?.grammar || \"-\"} / 9\n              </span>\n            </div>\n            <div className=\"band-item\">\n              <strong>Pronunciation</strong>\n              <span style={{ color: getBandColor(testSummary?.pronunciation) }}>\n                {testSummary?.pronunciation || \"-\"} / 9\n              </span>\n            </div>\n            <div className=\"band-item overall\">\n              <strong>Overall Band Score</strong>\n              <span>{testSummary?.overall || \"-\"}/9</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"results-actions panel\">\n          <button onClick={downloadCertificate} className=\"btn-primary\">\n            📄 Download Certificate\n          </button>\n          <button onClick={resetTest} className=\"btn-secondary\">\n            🔄 Retake Test\n          </button>\n        </div>\n\n        <div className=\"detailed-feedback panel\">\n          <h3>Detailed Question-by-Question Feedback</h3>\n          {feedbacks.map((fb, idx) => {\n            const part1Len = currentTest.testStructure.part1.questions.length;\n            const part = idx < part1Len ? 1 : idx === part1Len ? 2 : 3;\n            return (\n              <details key={idx} className=\"feedback-item\">\n                <summary>\n                  Question {idx + 1} (Part {part}) – Overall: {fb.overall || \"-\"} / 9\n                </summary>\n                <pre>{fb.feedback}</pre>\n              </details>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  // Normal UI for the test (Parts 1-3) goes here; omitted for brevity\n  \n  return (\n    <div className=\"speech-evaluator\">\n      {/* Test UI content remains unchanged */}\n      {/* Please preserve your existing JSX here */}\n    </div>\n  );\n}\n\nexport default SpeechEvaluator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}