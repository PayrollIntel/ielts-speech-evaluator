{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\ielts-speech-evaluator\\\\src\\\\components\\\\SpeechEvaluator.jsx\",\n  _s = $RefreshSig$();\n// Enhanced SpeechEvaluator.jsx - Complete IELTS Speech Evaluator with Question Bank Integration\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport questionBank from \"../data/questions\";\nimport './SpeechEvaluator.css';\n\n// Function to create randomized tests from question bank\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst createRandomTest = () => {\n  // Filter questions by difficulty for balanced test\n  const easyQuestions = questionBank.filter(q => q.difficulty === \"easy\");\n  const mediumQuestions = questionBank.filter(q => q.difficulty === \"medium\");\n  const hardQuestions = questionBank.filter(q => q.difficulty === \"hard\");\n\n  // Create a balanced test with 1 easy, 1 medium, 1 hard question\n  const selectedQuestions = [easyQuestions[Math.floor(Math.random() * easyQuestions.length)], mediumQuestions[Math.floor(Math.random() * mediumQuestions.length)], hardQuestions[Math.floor(Math.random() * hardQuestions.length)]];\n  return {\n    testId: `test_${Date.now()}`,\n    title: `IELTS Speaking Practice - ${new Date().toLocaleDateString()}`,\n    questions: selectedQuestions.map(q => q.prompt),\n    sampleAnswers: selectedQuestions.map(q => q.sampleAnswer),\n    categories: selectedQuestions.map(q => q.category),\n    difficulties: selectedQuestions.map(q => q.difficulty),\n    questionIds: selectedQuestions.map(q => q.id)\n  };\n};\n\n// Alternative function to create tests by specific criteria\nconst createCustomTest = (criteria = {}) => {\n  let filteredQuestions = questionBank;\n\n  // Filter by category if specified\n  if (criteria.category) {\n    filteredQuestions = filteredQuestions.filter(q => q.category.toLowerCase().includes(criteria.category.toLowerCase()));\n  }\n\n  // Filter by difficulty if specified\n  if (criteria.difficulty) {\n    filteredQuestions = filteredQuestions.filter(q => q.difficulty === criteria.difficulty);\n  }\n\n  // Shuffle and take specified number of questions (default 3)\n  const numQuestions = criteria.numQuestions || 3;\n  const shuffled = [...filteredQuestions].sort(() => Math.random() - 0.5);\n  const selectedQuestions = shuffled.slice(0, numQuestions);\n  return {\n    testId: `custom_test_${Date.now()}`,\n    title: criteria.title || `Custom IELTS Test - ${criteria.category || 'Mixed Topics'}`,\n    questions: selectedQuestions.map(q => q.prompt),\n    sampleAnswers: selectedQuestions.map(q => q.sampleAnswer),\n    categories: selectedQuestions.map(q => q.category),\n    difficulties: selectedQuestions.map(q => q.difficulty),\n    questionIds: selectedQuestions.map(q => q.id)\n  };\n};\n\n// Pronunciation Analyzer Class (simplified for React integration)\nclass SimplePronunciationAnalyzer {\n  constructor() {\n    this.audioContext = null;\n    this.analyser = null;\n    this.features = {\n      pitch: [],\n      rms: [],\n      spectralCentroid: [],\n      zcr: []\n    };\n    this.isAnalyzing = false;\n  }\n  async initialize() {\n    try {\n      // Only create AudioContext, don't start it yet\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n      // Resume context if it's suspended (required for user interaction policy)\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n      }\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize audio context:', error);\n      return false;\n    }\n  }\n  async startAnalysis(stream) {\n    if (!this.audioContext) {\n      throw new Error('Audio context not initialized');\n    }\n    const source = this.audioContext.createMediaStreamSource(stream);\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = 2048;\n    this.analyser.smoothingTimeConstant = 0.8;\n    this.analyser.minDecibels = -90;\n    this.analyser.maxDecibels = -10;\n    source.connect(this.analyser);\n    this.isAnalyzing = true;\n    this.startFeatureExtraction();\n  }\n  startFeatureExtraction() {\n    const bufferLength = this.analyser.frequencyBinCount;\n    const dataArray = new Float32Array(bufferLength);\n    const timeDataArray = new Float32Array(this.analyser.fftSize);\n    const extractFeatures = () => {\n      if (!this.isAnalyzing) return;\n      this.analyser.getFloatFrequencyData(dataArray);\n      this.analyser.getFloatTimeDomainData(timeDataArray);\n      const timestamp = this.audioContext.currentTime;\n      const rms = this.calculateRMS(timeDataArray);\n      const zcr = this.calculateZCR(timeDataArray);\n      const spectralCentroid = this.calculateSpectralCentroid(dataArray);\n      const pitch = this.detectPitch(timeDataArray);\n      this.features.rms.push({\n        value: rms,\n        timestamp\n      });\n      this.features.zcr.push({\n        value: zcr,\n        timestamp\n      });\n      this.features.spectralCentroid.push({\n        value: spectralCentroid,\n        timestamp\n      });\n      if (pitch && pitch > 50 && pitch < 800) {\n        this.features.pitch.push({\n          frequency: pitch,\n          timestamp\n        });\n      }\n      requestAnimationFrame(extractFeatures);\n    };\n    extractFeatures();\n  }\n  calculateRMS(timeData) {\n    let sum = 0;\n    for (let i = 0; i < timeData.length; i++) {\n      sum += timeData[i] * timeData[i];\n    }\n    return Math.sqrt(sum / timeData.length);\n  }\n  calculateZCR(timeData) {\n    let zeroCrossings = 0;\n    for (let i = 1; i < timeData.length; i++) {\n      if (timeData[i] >= 0 !== timeData[i - 1] >= 0) {\n        zeroCrossings++;\n      }\n    }\n    return zeroCrossings / (timeData.length - 1);\n  }\n  calculateSpectralCentroid(freqData) {\n    let weightedSum = 0;\n    let magnitudeSum = 0;\n    for (let i = 0; i < freqData.length; i++) {\n      const magnitude = Math.pow(10, freqData[i] / 10);\n      const frequency = i * this.audioContext.sampleRate / (2 * freqData.length);\n      weightedSum += frequency * magnitude;\n      magnitudeSum += magnitude;\n    }\n    return magnitudeSum > 0 ? weightedSum / magnitudeSum : 0;\n  }\n  detectPitch(timeData) {\n    const sampleRate = this.audioContext.sampleRate;\n    const minPeriod = Math.floor(sampleRate / 800);\n    const maxPeriod = Math.floor(sampleRate / 50);\n    let bestCorrelation = 0;\n    let bestPeriod = 0;\n    for (let period = minPeriod; period < Math.min(maxPeriod, timeData.length / 2); period++) {\n      let correlation = 0;\n      for (let i = 0; i < timeData.length - period; i++) {\n        correlation += timeData[i] * timeData[i + period];\n      }\n      if (correlation > bestCorrelation) {\n        bestCorrelation = correlation;\n        bestPeriod = period;\n      }\n    }\n    return bestPeriod > 0 ? sampleRate / bestPeriod : 0;\n  }\n  analyzeStressPatterns() {\n    if (this.features.rms.length < 10) {\n      return {\n        stressPattern: '',\n        rhythmScore: 0.5,\n        intonationVariation: 0.5,\n        stressAccuracy: 0.5\n      };\n    }\n    const syllables = this.detectSyllables();\n    let stressPattern = '';\n    let stressedCount = 0;\n    syllables.forEach(syllable => {\n      const stressScore = this.calculateSyllableStress(syllable);\n      if (stressScore > 0.6) {\n        stressPattern += 'S';\n        stressedCount++;\n      } else {\n        stressPattern += 'U';\n      }\n    });\n    const stressRatio = syllables.length > 0 ? stressedCount / syllables.length : 0;\n    const stressAccuracy = stressRatio >= 0.2 && stressRatio <= 0.4 ? Math.min(stressRatio / 0.3, 1.0) : 0.5;\n    return {\n      stressPattern,\n      rhythmScore: this.calculateRhythm(syllables),\n      intonationVariation: this.calculateIntonation(),\n      stressAccuracy\n    };\n  }\n  detectSyllables() {\n    const threshold = this.calculateEnergyThreshold();\n    const syllables = [];\n    let currentSyllable = null;\n    let inSyllable = false;\n    this.features.rms.forEach((rmsData, index) => {\n      const energy = rmsData.value;\n      const isVoiced = energy > threshold;\n      if (isVoiced && !inSyllable) {\n        currentSyllable = {\n          startTime: rmsData.timestamp,\n          peakEnergy: energy,\n          energySum: energy,\n          samples: 1\n        };\n        inSyllable = true;\n      } else if (isVoiced && inSyllable) {\n        currentSyllable.peakEnergy = Math.max(currentSyllable.peakEnergy, energy);\n        currentSyllable.energySum += energy;\n        currentSyllable.samples++;\n      } else if (!isVoiced && inSyllable) {\n        currentSyllable.endTime = rmsData.timestamp;\n        currentSyllable.duration = currentSyllable.endTime - currentSyllable.startTime;\n        currentSyllable.avgEnergy = currentSyllable.energySum / currentSyllable.samples;\n        syllables.push(currentSyllable);\n        inSyllable = false;\n      }\n    });\n    return syllables;\n  }\n  calculateSyllableStress(syllable) {\n    const avgIntensity = this.features.rms.reduce((sum, r) => sum + r.value, 0) / this.features.rms.length;\n    const intensityScore = Math.min(syllable.avgEnergy / Math.max(avgIntensity, 0.001), 2.0);\n    return intensityScore / 2.0;\n  }\n  calculateRhythm(syllables) {\n    if (syllables.length < 3) return 0.5;\n    const intervals = [];\n    for (let i = 1; i < syllables.length; i++) {\n      intervals.push(syllables[i].startTime - syllables[i - 1].startTime);\n    }\n    const avgInterval = intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length;\n    const variance = intervals.reduce((sum, interval) => sum + Math.pow(interval - avgInterval, 2), 0) / intervals.length;\n    const coefficient = Math.sqrt(variance) / Math.max(avgInterval, 0.1);\n    return Math.max(0, 1 - coefficient);\n  }\n  calculateIntonation() {\n    if (this.features.pitch.length < 10) return 0.5;\n    const pitches = this.features.pitch.map(p => p.frequency);\n    const minPitch = Math.min(...pitches);\n    const maxPitch = Math.max(...pitches);\n    const avgPitch = pitches.reduce((sum, p) => sum + p, 0) / pitches.length;\n    const pitchRange = (maxPitch - minPitch) / avgPitch;\n    return Math.min(pitchRange / 0.5, 1.0);\n  }\n  calculateEnergyThreshold() {\n    if (this.features.rms.length === 0) return 0.01;\n    const energies = this.features.rms.map(r => r.value).sort((a, b) => a - b);\n    return energies[Math.floor(energies.length * 0.75)] * 0.25;\n  }\n  stopAnalysis() {\n    this.isAnalyzing = false;\n  }\n  getFeatures() {\n    return {\n      ...this.features,\n      analysis: this.analyzeStressPatterns()\n    };\n  }\n  reset() {\n    this.features = {\n      pitch: [],\n      rms: [],\n      spectralCentroid: [],\n      zcr: []\n    };\n    this.isAnalyzing = false;\n  }\n}\n\n// Main Speech Evaluator Component\nfunction SpeechEvaluator() {\n  _s();\n  // State management\n  const [currentTest, setCurrentTest] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [recording, setRecording] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [feedbacks, setFeedbacks] = useState(null);\n  const [testSummary, setTestSummary] = useState(null);\n  const [error, setError] = useState(null);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const [testMode, setTestMode] = useState('random'); // 'random', 'category', 'difficulty'\n  const [customCriteria, setCustomCriteria] = useState({});\n\n  // FIXED: Add component ready state\n  const [isComponentReady, setIsComponentReady] = useState(false);\n  const [initializationError, setInitializationError] = useState(null);\n\n  // Pronunciation analysis state\n  const [pronunciationAnalyzer, setPronunciationAnalyzer] = useState(null);\n  const [audioFeatures, setAudioFeatures] = useState({});\n  const [isAnalyzingPronunciation, setIsAnalyzingPronunciation] = useState(false);\n  const [realTimeFeatures, setRealTimeFeatures] = useState({\n    pitch: 0,\n    intensity: 0,\n    stressPattern: ''\n  });\n\n  // Refs\n  const recognitionRef = useRef(null);\n  const recordingTimerRef = useRef(null);\n  const currentStreamRef = useRef(null);\n\n  // FIXED: Initialize test and pronunciation analyzer with proper async handling\n  useEffect(() => {\n    const initializeComponent = async () => {\n      try {\n        // Create test first\n        const test = createRandomTest();\n        setCurrentTest(test);\n        setAnswers(Array(test.questions.length).fill(\"\"));\n\n        // Initialize pronunciation analyzer (without AudioContext yet)\n        const analyzer = new SimplePronunciationAnalyzer();\n        setPronunciationAnalyzer(analyzer);\n\n        // Component is ready\n        setIsComponentReady(true);\n        setInitializationError(null);\n      } catch (error) {\n        console.error('Component initialization failed:', error);\n        setInitializationError('Failed to initialize speech evaluator. Please refresh the page.');\n        setIsComponentReady(true); // Still set to true to show error state\n      }\n    };\n    initializeComponent();\n  }, []);\n\n  // Real-time feature updates\n  useEffect(() => {\n    let interval;\n    if (isAnalyzingPronunciation && pronunciationAnalyzer) {\n      interval = setInterval(() => {\n        const features = pronunciationAnalyzer.features;\n        if (features.pitch.length > 0) {\n          const latestPitch = features.pitch[features.pitch.length - 1];\n          const latestRms = features.rms.length > 0 ? features.rms[features.rms.length - 1] : {\n            value: 0\n          };\n          const analysis = pronunciationAnalyzer.analyzeStressPatterns();\n          setRealTimeFeatures({\n            pitch: latestPitch.frequency.toFixed(1),\n            intensity: (latestRms.value * 100).toFixed(1),\n            stressPattern: analysis.stressPattern\n          });\n        }\n      }, 200);\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isAnalyzingPronunciation, pronunciationAnalyzer]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (recordingTimerRef.current) {\n        clearInterval(recordingTimerRef.current);\n      }\n      if (currentStreamRef.current) {\n        currentStreamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (pronunciationAnalyzer) {\n        pronunciationAnalyzer.stopAnalysis();\n      }\n    };\n  }, [pronunciationAnalyzer]);\n\n  // Timer functions\n  const startRecordingTimer = useCallback(() => {\n    setRecordingTime(0);\n    recordingTimerRef.current = setInterval(() => {\n      setRecordingTime(prev => prev + 1);\n    }, 1000);\n  }, []);\n  const stopRecordingTimer = useCallback(() => {\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n      recordingTimerRef.current = null;\n    }\n  }, []);\n  const formatTime = useCallback(seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n\n  // Function to create new test\n  const createNewTest = (criteria = {}) => {\n    let test;\n    if (criteria.mode === 'custom' && Object.keys(criteria).length > 1) {\n      test = createCustomTest(criteria);\n    } else {\n      test = createRandomTest();\n    }\n    setCurrentTest(test);\n    setAnswers(Array(test.questions.length).fill(\"\"));\n    setCurrentQuestionIndex(0);\n    setFeedbacks(null);\n    setTestSummary(null);\n    setShowResults(false);\n    setError(null);\n    setRecordingTime(0);\n    setAudioFeatures({});\n    setRealTimeFeatures({\n      pitch: 0,\n      intensity: 0,\n      stressPattern: ''\n    });\n    if (pronunciationAnalyzer) {\n      pronunciationAnalyzer.reset();\n    }\n  };\n\n  // FIXED: Enhanced recording with pronunciation analysis and proper AudioContext initialization\n  const toggleRecording = async () => {\n    if (recording) {\n      var _recognitionRef$curre;\n      // Stop recording\n      (_recognitionRef$curre = recognitionRef.current) === null || _recognitionRef$curre === void 0 ? void 0 : _recognitionRef$curre.stop();\n      if (pronunciationAnalyzer && isAnalyzingPronunciation) {\n        pronunciationAnalyzer.stopAnalysis();\n        const features = pronunciationAnalyzer.getFeatures();\n        setAudioFeatures(prev => ({\n          ...prev,\n          [currentQuestionIndex]: features\n        }));\n        setIsAnalyzingPronunciation(false);\n      }\n      if (currentStreamRef.current) {\n        currentStreamRef.current.getTracks().forEach(track => track.stop());\n      }\n      return;\n    }\n\n    // FIXED: Initialize AudioContext on first user interaction\n    if (pronunciationAnalyzer && !pronunciationAnalyzer.audioContext) {\n      try {\n        const initialized = await pronunciationAnalyzer.initialize();\n        if (!initialized) {\n          console.warn('AudioContext initialization failed, continuing without pronunciation analysis');\n        }\n      } catch (error) {\n        console.warn('AudioContext initialization error:', error);\n      }\n    }\n\n    // Check browser support\n    if (!(\"webkitSpeechRecognition\" in window) && !(\"SpeechRecognition\" in window)) {\n      setError(\"Speech recognition is not supported in this browser. Please use Chrome or Edge.\");\n      return;\n    }\n    try {\n      // Get microphone stream\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: false,\n          sampleRate: 44100\n        }\n      });\n      currentStreamRef.current = stream;\n\n      // Start pronunciation analysis\n      if (pronunciationAnalyzer && pronunciationAnalyzer.audioContext) {\n        try {\n          pronunciationAnalyzer.reset();\n          await pronunciationAnalyzer.startAnalysis(stream);\n          setIsAnalyzingPronunciation(true);\n        } catch (analysisError) {\n          console.warn('Pronunciation analysis failed:', analysisError);\n        }\n      }\n\n      // Setup speech recognition\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      recognition.lang = \"en-US\";\n      recognition.continuous = true;\n      recognition.interimResults = false;\n      recognition.maxAlternatives = 1;\n      recognition.onstart = () => {\n        setRecording(true);\n        setError(null);\n        startRecordingTimer();\n      };\n      recognition.onresult = event => {\n        const speechText = Array.from(event.results).map(result => result[0].transcript).join(\" \");\n        setAnswers(prev => {\n          const newAnswers = [...prev];\n          newAnswers[currentQuestionIndex] = speechText.trim();\n          return newAnswers;\n        });\n      };\n      recognition.onend = () => {\n        setRecording(false);\n        stopRecordingTimer();\n      };\n      recognition.onerror = event => {\n        console.error(\"Speech recognition error:\", event.error);\n        setError(`⚠️ Speech recognition error: ${event.error}. Please try again.`);\n        setRecording(false);\n        stopRecordingTimer();\n        setIsAnalyzingPronunciation(false);\n      };\n      recognitionRef.current = recognition;\n      recognition.start();\n    } catch (err) {\n      setError(\"⚠️ Failed to access microphone. Please check your permissions and try again.\");\n      console.error(\"Microphone access error:\", err);\n    }\n  };\n\n  // Navigation functions\n  const goNext = () => {\n    if (currentQuestionIndex < currentTest.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n  const goPrev = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n\n  // Enhanced submit with pronunciation analysis\n  const submitTest = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"/api/analyze-batch\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          testId: currentTest.testId,\n          questions: currentTest.questions,\n          answers,\n          sampleAnswers: currentTest.sampleAnswers,\n          audioFeatures // Include pronunciation features\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.status}`);\n      }\n      const data = await response.json();\n      setFeedbacks(data.feedbacks);\n      setTestSummary(data.testSummary);\n      setShowResults(true);\n    } catch (err) {\n      console.error(\"Analysis error:\", err);\n      setError(\"⚠️ Error during analysis. Please check your connection and try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset function\n  const resetTest = () => {\n    createNewTest({\n      mode: 'random'\n    });\n  };\n\n  // Band color function\n  const getBandColor = band => {\n    if (band >= 8.5) return \"#2e7d32\"; // Dark green\n    if (band >= 7) return \"#388e3c\"; // Green\n    if (band >= 6.5) return \"#689f38\"; // Light green\n    if (band >= 6) return \"#afb42b\"; // Yellow green\n    if (band >= 5.5) return \"#f57f17\"; // Dark yellow\n    if (band >= 5) return \"#ff8f00\"; // Orange\n    if (band >= 4) return \"#f57c00\"; // Dark orange\n    return \"#d32f2f\"; // Red\n  };\n\n  // Get available categories for custom test creation\n  const getAvailableCategories = () => {\n    const categories = [...new Set(questionBank.map(q => q.category))];\n    return categories;\n  };\n\n  // FIXED: Add loading state check\n  if (!isComponentReady) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"speech-evaluator\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83C\\uDFA4 Initializing IELTS Speech Evaluator...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Setting up audio analysis and question bank...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 7\n    }, this);\n  }\n  if (initializationError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"speech-evaluator\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u26A0\\uFE0F Initialization Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: initializationError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => window.location.reload(),\n          children: \"Refresh Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Loading state for when component is initializing\n  if (!currentTest) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"speech-evaluator\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83C\\uDFA4 Initializing IELTS Speech Evaluator...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Loading \", questionBank.length, \" questions from question bank...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"speech-evaluator\",\n    children: [!showResults && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: currentTest.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You've answered \", answers.filter(a => a.trim().length > 0).length, \" of \", currentTest.questions.length, \" questions.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"question-number\",\n            children: [\"Question \", currentQuestionIndex + 1, \" of \", currentTest.questions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"difficulty-badge\",\n            children: currentTest.difficulties[currentQuestionIndex]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-text\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: currentTest.questions[currentQuestionIndex]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"category-tag\",\n            children: [\"Category: \", currentTest.categories[currentQuestionIndex]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"recording-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleRecording,\n            className: `record-button ${recording ? 'recording' : ''}`,\n            disabled: loading,\n            children: recording ? `🔴 Stop Recording (${formatTime(recordingTime)})` : '🎤 Start Recording'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 712,\n            columnNumber: 15\n          }, this), isAnalyzingPronunciation && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"realtime-analysis\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"analysis-item\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Pitch: \", realTimeFeatures.pitch, \" Hz\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 723,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 722,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"analysis-item\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Intensity: \", realTimeFeatures.intensity, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 726,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"analysis-item\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Pattern: \", realTimeFeatures.stressPattern]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 729,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 721,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"answer-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Your Answer:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 736,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: answers[currentQuestionIndex] || '',\n            onChange: e => {\n              const newAnswers = [...answers];\n              newAnswers[currentQuestionIndex] = e.target.value;\n              setAnswers(newAnswers);\n            },\n            placeholder: \"Your spoken answer will appear here, or you can type directly...\",\n            rows: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navigation-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: goPrev,\n          disabled: currentQuestionIndex === 0,\n          className: \"nav-button\",\n          children: \"\\u2190 Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: goNext,\n          disabled: currentQuestionIndex === currentTest.questions.length - 1,\n          className: \"nav-button\",\n          children: \"Next \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitTest,\n          disabled: loading || answers.filter(a => a.trim()).length === 0,\n          className: \"submit-button\",\n          children: loading ? '🔄 Analyzing...' : '📊 Submit Test for Analysis'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 769,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetTest,\n          className: \"reset-button\",\n          children: \"\\uD83D\\uDD04 New Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 768,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), showResults && feedbacks && testSummary && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uD83D\\uDCCA Test Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 790,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overall-score\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"score-label\",\n            children: \"Overall Band Score:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"score-value\",\n            style: {\n              color: getBandColor(testSummary.overall)\n            },\n            children: testSummary.overall\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 793,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 789,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"band-scores\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Fluency & Coherence:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 804,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: getBandColor(testSummary.fluency)\n            },\n            children: testSummary.fluency\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 805,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Lexical Resource:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 810,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: getBandColor(testSummary.lexical)\n            },\n            children: testSummary.lexical\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 811,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Grammatical Range:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 816,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: getBandColor(testSummary.grammar)\n            },\n            children: testSummary.grammar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 817,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 815,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Pronunciation:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 822,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: getBandColor(testSummary.pronunciation)\n            },\n            children: testSummary.pronunciation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 823,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 821,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"detailed-feedback\",\n        children: feedbacks.map((feedback, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"feedback-item\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: feedback.feedback.replace(/\\n/g, '<br>')\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 832,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 829,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetTest,\n          className: \"new-test-button\",\n          children: \"\\uD83C\\uDD95 Take Another Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 838,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 837,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 847,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 846,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 691,\n    columnNumber: 5\n  }, this);\n}\n_s(SpeechEvaluator, \"U99Ztrx3FuYAWjyJqHGBmioeJNQ=\");\n_c = SpeechEvaluator;\nexport default SpeechEvaluator;\nvar _c;\n$RefreshReg$(_c, \"SpeechEvaluator\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","questionBank","jsxDEV","_jsxDEV","Fragment","_Fragment","createRandomTest","easyQuestions","filter","q","difficulty","mediumQuestions","hardQuestions","selectedQuestions","Math","floor","random","length","testId","Date","now","title","toLocaleDateString","questions","map","prompt","sampleAnswers","sampleAnswer","categories","category","difficulties","questionIds","id","createCustomTest","criteria","filteredQuestions","toLowerCase","includes","numQuestions","shuffled","sort","slice","SimplePronunciationAnalyzer","constructor","audioContext","analyser","features","pitch","rms","spectralCentroid","zcr","isAnalyzing","initialize","window","AudioContext","webkitAudioContext","state","resume","error","console","startAnalysis","stream","Error","source","createMediaStreamSource","createAnalyser","fftSize","smoothingTimeConstant","minDecibels","maxDecibels","connect","startFeatureExtraction","bufferLength","frequencyBinCount","dataArray","Float32Array","timeDataArray","extractFeatures","getFloatFrequencyData","getFloatTimeDomainData","timestamp","currentTime","calculateRMS","calculateZCR","calculateSpectralCentroid","detectPitch","push","value","frequency","requestAnimationFrame","timeData","sum","i","sqrt","zeroCrossings","freqData","weightedSum","magnitudeSum","magnitude","pow","sampleRate","minPeriod","maxPeriod","bestCorrelation","bestPeriod","period","min","correlation","analyzeStressPatterns","stressPattern","rhythmScore","intonationVariation","stressAccuracy","syllables","detectSyllables","stressedCount","forEach","syllable","stressScore","calculateSyllableStress","stressRatio","calculateRhythm","calculateIntonation","threshold","calculateEnergyThreshold","currentSyllable","inSyllable","rmsData","index","energy","isVoiced","startTime","peakEnergy","energySum","samples","max","endTime","duration","avgEnergy","avgIntensity","reduce","r","intensityScore","intervals","avgInterval","interval","variance","coefficient","pitches","p","minPitch","maxPitch","avgPitch","pitchRange","energies","a","b","stopAnalysis","getFeatures","analysis","reset","SpeechEvaluator","_s","currentTest","setCurrentTest","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","recording","setRecording","loading","setLoading","feedbacks","setFeedbacks","testSummary","setTestSummary","setError","recordingTime","setRecordingTime","showResults","setShowResults","testMode","setTestMode","customCriteria","setCustomCriteria","isComponentReady","setIsComponentReady","initializationError","setInitializationError","pronunciationAnalyzer","setPronunciationAnalyzer","audioFeatures","setAudioFeatures","isAnalyzingPronunciation","setIsAnalyzingPronunciation","realTimeFeatures","setRealTimeFeatures","intensity","recognitionRef","recordingTimerRef","currentStreamRef","initializeComponent","test","Array","fill","analyzer","setInterval","latestPitch","latestRms","toFixed","clearInterval","current","getTracks","track","stop","startRecordingTimer","prev","stopRecordingTimer","formatTime","seconds","mins","secs","toString","padStart","createNewTest","mode","Object","keys","toggleRecording","_recognitionRef$curre","initialized","warn","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","analysisError","SpeechRecognition","webkitSpeechRecognition","recognition","lang","continuous","interimResults","maxAlternatives","onstart","onresult","event","speechText","from","results","result","transcript","join","newAnswers","trim","onend","onerror","start","err","goNext","goPrev","submitTest","response","fetch","method","headers","body","JSON","stringify","ok","status","data","json","resetTest","getBandColor","band","getAvailableCategories","Set","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","location","reload","disabled","onChange","e","target","placeholder","rows","style","color","overall","fluency","lexical","grammar","pronunciation","feedback","dangerouslySetInnerHTML","__html","replace","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/ielts-speech-evaluator/src/components/SpeechEvaluator.jsx"],"sourcesContent":["// Enhanced SpeechEvaluator.jsx - Complete IELTS Speech Evaluator with Question Bank Integration\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport questionBank from \"../data/questions\";\nimport './SpeechEvaluator.css';\n\n// Function to create randomized tests from question bank\nconst createRandomTest = () => {\n  // Filter questions by difficulty for balanced test\n  const easyQuestions = questionBank.filter(q => q.difficulty === \"easy\");\n  const mediumQuestions = questionBank.filter(q => q.difficulty === \"medium\");\n  const hardQuestions = questionBank.filter(q => q.difficulty === \"hard\");\n\n  // Create a balanced test with 1 easy, 1 medium, 1 hard question\n  const selectedQuestions = [\n    easyQuestions[Math.floor(Math.random() * easyQuestions.length)],\n    mediumQuestions[Math.floor(Math.random() * mediumQuestions.length)],\n    hardQuestions[Math.floor(Math.random() * hardQuestions.length)]\n  ];\n\n  return {\n    testId: `test_${Date.now()}`,\n    title: `IELTS Speaking Practice - ${new Date().toLocaleDateString()}`,\n    questions: selectedQuestions.map(q => q.prompt),\n    sampleAnswers: selectedQuestions.map(q => q.sampleAnswer),\n    categories: selectedQuestions.map(q => q.category),\n    difficulties: selectedQuestions.map(q => q.difficulty),\n    questionIds: selectedQuestions.map(q => q.id)\n  };\n};\n\n// Alternative function to create tests by specific criteria\nconst createCustomTest = (criteria = {}) => {\n  let filteredQuestions = questionBank;\n\n  // Filter by category if specified\n  if (criteria.category) {\n    filteredQuestions = filteredQuestions.filter(q =>\n      q.category.toLowerCase().includes(criteria.category.toLowerCase())\n    );\n  }\n\n  // Filter by difficulty if specified\n  if (criteria.difficulty) {\n    filteredQuestions = filteredQuestions.filter(q => q.difficulty === criteria.difficulty);\n  }\n\n  // Shuffle and take specified number of questions (default 3)\n  const numQuestions = criteria.numQuestions || 3;\n  const shuffled = [...filteredQuestions].sort(() => Math.random() - 0.5);\n  const selectedQuestions = shuffled.slice(0, numQuestions);\n\n  return {\n    testId: `custom_test_${Date.now()}`,\n    title: criteria.title || `Custom IELTS Test - ${criteria.category || 'Mixed Topics'}`,\n    questions: selectedQuestions.map(q => q.prompt),\n    sampleAnswers: selectedQuestions.map(q => q.sampleAnswer),\n    categories: selectedQuestions.map(q => q.category),\n    difficulties: selectedQuestions.map(q => q.difficulty),\n    questionIds: selectedQuestions.map(q => q.id)\n  };\n};\n\n// Pronunciation Analyzer Class (simplified for React integration)\nclass SimplePronunciationAnalyzer {\n  constructor() {\n    this.audioContext = null;\n    this.analyser = null;\n    this.features = {\n      pitch: [],\n      rms: [],\n      spectralCentroid: [],\n      zcr: []\n    };\n    this.isAnalyzing = false;\n  }\n\n  async initialize() {\n    try {\n      // Only create AudioContext, don't start it yet\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      \n      // Resume context if it's suspended (required for user interaction policy)\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to initialize audio context:', error);\n      return false;\n    }\n  }\n\n  async startAnalysis(stream) {\n    if (!this.audioContext) {\n      throw new Error('Audio context not initialized');\n    }\n\n    const source = this.audioContext.createMediaStreamSource(stream);\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = 2048;\n    this.analyser.smoothingTimeConstant = 0.8;\n    this.analyser.minDecibels = -90;\n    this.analyser.maxDecibels = -10;\n\n    source.connect(this.analyser);\n    this.isAnalyzing = true;\n    this.startFeatureExtraction();\n  }\n\n  startFeatureExtraction() {\n    const bufferLength = this.analyser.frequencyBinCount;\n    const dataArray = new Float32Array(bufferLength);\n    const timeDataArray = new Float32Array(this.analyser.fftSize);\n\n    const extractFeatures = () => {\n      if (!this.isAnalyzing) return;\n\n      this.analyser.getFloatFrequencyData(dataArray);\n      this.analyser.getFloatTimeDomainData(timeDataArray);\n\n      const timestamp = this.audioContext.currentTime;\n      const rms = this.calculateRMS(timeDataArray);\n      const zcr = this.calculateZCR(timeDataArray);\n      const spectralCentroid = this.calculateSpectralCentroid(dataArray);\n      const pitch = this.detectPitch(timeDataArray);\n\n      this.features.rms.push({ value: rms, timestamp });\n      this.features.zcr.push({ value: zcr, timestamp });\n      this.features.spectralCentroid.push({ value: spectralCentroid, timestamp });\n\n      if (pitch && pitch > 50 && pitch < 800) {\n        this.features.pitch.push({ frequency: pitch, timestamp });\n      }\n\n      requestAnimationFrame(extractFeatures);\n    };\n\n    extractFeatures();\n  }\n\n  calculateRMS(timeData) {\n    let sum = 0;\n    for (let i = 0; i < timeData.length; i++) {\n      sum += timeData[i] * timeData[i];\n    }\n    return Math.sqrt(sum / timeData.length);\n  }\n\n  calculateZCR(timeData) {\n    let zeroCrossings = 0;\n    for (let i = 1; i < timeData.length; i++) {\n      if ((timeData[i] >= 0) !== (timeData[i - 1] >= 0)) {\n        zeroCrossings++;\n      }\n    }\n    return zeroCrossings / (timeData.length - 1);\n  }\n\n  calculateSpectralCentroid(freqData) {\n    let weightedSum = 0;\n    let magnitudeSum = 0;\n\n    for (let i = 0; i < freqData.length; i++) {\n      const magnitude = Math.pow(10, freqData[i] / 10);\n      const frequency = (i * this.audioContext.sampleRate) / (2 * freqData.length);\n      weightedSum += frequency * magnitude;\n      magnitudeSum += magnitude;\n    }\n\n    return magnitudeSum > 0 ? weightedSum / magnitudeSum : 0;\n  }\n\n  detectPitch(timeData) {\n    const sampleRate = this.audioContext.sampleRate;\n    const minPeriod = Math.floor(sampleRate / 800);\n    const maxPeriod = Math.floor(sampleRate / 50);\n\n    let bestCorrelation = 0;\n    let bestPeriod = 0;\n\n    for (let period = minPeriod; period < Math.min(maxPeriod, timeData.length / 2); period++) {\n      let correlation = 0;\n      for (let i = 0; i < timeData.length - period; i++) {\n        correlation += timeData[i] * timeData[i + period];\n      }\n\n      if (correlation > bestCorrelation) {\n        bestCorrelation = correlation;\n        bestPeriod = period;\n      }\n    }\n\n    return bestPeriod > 0 ? sampleRate / bestPeriod : 0;\n  }\n\n  analyzeStressPatterns() {\n    if (this.features.rms.length < 10) {\n      return {\n        stressPattern: '',\n        rhythmScore: 0.5,\n        intonationVariation: 0.5,\n        stressAccuracy: 0.5\n      };\n    }\n\n    const syllables = this.detectSyllables();\n    let stressPattern = '';\n    let stressedCount = 0;\n\n    syllables.forEach(syllable => {\n      const stressScore = this.calculateSyllableStress(syllable);\n      if (stressScore > 0.6) {\n        stressPattern += 'S';\n        stressedCount++;\n      } else {\n        stressPattern += 'U';\n      }\n    });\n\n    const stressRatio = syllables.length > 0 ? stressedCount / syllables.length : 0;\n    const stressAccuracy = stressRatio >= 0.2 && stressRatio <= 0.4 ? Math.min(stressRatio / 0.3, 1.0) : 0.5;\n\n    return {\n      stressPattern,\n      rhythmScore: this.calculateRhythm(syllables),\n      intonationVariation: this.calculateIntonation(),\n      stressAccuracy\n    };\n  }\n\n  detectSyllables() {\n    const threshold = this.calculateEnergyThreshold();\n    const syllables = [];\n    let currentSyllable = null;\n    let inSyllable = false;\n\n    this.features.rms.forEach((rmsData, index) => {\n      const energy = rmsData.value;\n      const isVoiced = energy > threshold;\n\n      if (isVoiced && !inSyllable) {\n        currentSyllable = {\n          startTime: rmsData.timestamp,\n          peakEnergy: energy,\n          energySum: energy,\n          samples: 1\n        };\n        inSyllable = true;\n      } else if (isVoiced && inSyllable) {\n        currentSyllable.peakEnergy = Math.max(currentSyllable.peakEnergy, energy);\n        currentSyllable.energySum += energy;\n        currentSyllable.samples++;\n      } else if (!isVoiced && inSyllable) {\n        currentSyllable.endTime = rmsData.timestamp;\n        currentSyllable.duration = currentSyllable.endTime - currentSyllable.startTime;\n        currentSyllable.avgEnergy = currentSyllable.energySum / currentSyllable.samples;\n        syllables.push(currentSyllable);\n        inSyllable = false;\n      }\n    });\n\n    return syllables;\n  }\n\n  calculateSyllableStress(syllable) {\n    const avgIntensity = this.features.rms.reduce((sum, r) => sum + r.value, 0) / this.features.rms.length;\n    const intensityScore = Math.min(syllable.avgEnergy / Math.max(avgIntensity, 0.001), 2.0);\n    return intensityScore / 2.0;\n  }\n\n  calculateRhythm(syllables) {\n    if (syllables.length < 3) return 0.5;\n\n    const intervals = [];\n    for (let i = 1; i < syllables.length; i++) {\n      intervals.push(syllables[i].startTime - syllables[i-1].startTime);\n    }\n\n    const avgInterval = intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length;\n    const variance = intervals.reduce((sum, interval) => sum + Math.pow(interval - avgInterval, 2), 0) / intervals.length;\n    const coefficient = Math.sqrt(variance) / Math.max(avgInterval, 0.1);\n\n    return Math.max(0, 1 - coefficient);\n  }\n\n  calculateIntonation() {\n    if (this.features.pitch.length < 10) return 0.5;\n\n    const pitches = this.features.pitch.map(p => p.frequency);\n    const minPitch = Math.min(...pitches);\n    const maxPitch = Math.max(...pitches);\n    const avgPitch = pitches.reduce((sum, p) => sum + p, 0) / pitches.length;\n    const pitchRange = (maxPitch - minPitch) / avgPitch;\n\n    return Math.min(pitchRange / 0.5, 1.0);\n  }\n\n  calculateEnergyThreshold() {\n    if (this.features.rms.length === 0) return 0.01;\n\n    const energies = this.features.rms.map(r => r.value).sort((a, b) => a - b);\n    return energies[Math.floor(energies.length * 0.75)] * 0.25;\n  }\n\n  stopAnalysis() {\n    this.isAnalyzing = false;\n  }\n\n  getFeatures() {\n    return {\n      ...this.features,\n      analysis: this.analyzeStressPatterns()\n    };\n  }\n\n  reset() {\n    this.features = {\n      pitch: [],\n      rms: [],\n      spectralCentroid: [],\n      zcr: []\n    };\n    this.isAnalyzing = false;\n  }\n}\n\n// Main Speech Evaluator Component\nfunction SpeechEvaluator() {\n  // State management\n  const [currentTest, setCurrentTest] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [recording, setRecording] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [feedbacks, setFeedbacks] = useState(null);\n  const [testSummary, setTestSummary] = useState(null);\n  const [error, setError] = useState(null);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const [testMode, setTestMode] = useState('random'); // 'random', 'category', 'difficulty'\n  const [customCriteria, setCustomCriteria] = useState({});\n\n  // FIXED: Add component ready state\n  const [isComponentReady, setIsComponentReady] = useState(false);\n  const [initializationError, setInitializationError] = useState(null);\n\n  // Pronunciation analysis state\n  const [pronunciationAnalyzer, setPronunciationAnalyzer] = useState(null);\n  const [audioFeatures, setAudioFeatures] = useState({});\n  const [isAnalyzingPronunciation, setIsAnalyzingPronunciation] = useState(false);\n  const [realTimeFeatures, setRealTimeFeatures] = useState({\n    pitch: 0,\n    intensity: 0,\n    stressPattern: ''\n  });\n\n  // Refs\n  const recognitionRef = useRef(null);\n  const recordingTimerRef = useRef(null);\n  const currentStreamRef = useRef(null);\n\n  // FIXED: Initialize test and pronunciation analyzer with proper async handling\n  useEffect(() => {\n    const initializeComponent = async () => {\n      try {\n        // Create test first\n        const test = createRandomTest();\n        setCurrentTest(test);\n        setAnswers(Array(test.questions.length).fill(\"\"));\n        \n        // Initialize pronunciation analyzer (without AudioContext yet)\n        const analyzer = new SimplePronunciationAnalyzer();\n        setPronunciationAnalyzer(analyzer);\n        \n        // Component is ready\n        setIsComponentReady(true);\n        setInitializationError(null);\n        \n      } catch (error) {\n        console.error('Component initialization failed:', error);\n        setInitializationError('Failed to initialize speech evaluator. Please refresh the page.');\n        setIsComponentReady(true); // Still set to true to show error state\n      }\n    };\n\n    initializeComponent();\n  }, []);\n\n  // Real-time feature updates\n  useEffect(() => {\n    let interval;\n    if (isAnalyzingPronunciation && pronunciationAnalyzer) {\n      interval = setInterval(() => {\n        const features = pronunciationAnalyzer.features;\n        if (features.pitch.length > 0) {\n          const latestPitch = features.pitch[features.pitch.length - 1];\n          const latestRms = features.rms.length > 0 ? features.rms[features.rms.length - 1] : { value: 0 };\n          const analysis = pronunciationAnalyzer.analyzeStressPatterns();\n\n          setRealTimeFeatures({\n            pitch: latestPitch.frequency.toFixed(1),\n            intensity: (latestRms.value * 100).toFixed(1),\n            stressPattern: analysis.stressPattern\n          });\n        }\n      }, 200);\n    }\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isAnalyzingPronunciation, pronunciationAnalyzer]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (recordingTimerRef.current) {\n        clearInterval(recordingTimerRef.current);\n      }\n      if (currentStreamRef.current) {\n        currentStreamRef.current.getTracks().forEach(track => track.stop());\n      }\n      if (pronunciationAnalyzer) {\n        pronunciationAnalyzer.stopAnalysis();\n      }\n    };\n  }, [pronunciationAnalyzer]);\n\n  // Timer functions\n  const startRecordingTimer = useCallback(() => {\n    setRecordingTime(0);\n    recordingTimerRef.current = setInterval(() => {\n      setRecordingTime(prev => prev + 1);\n    }, 1000);\n  }, []);\n\n  const stopRecordingTimer = useCallback(() => {\n    if (recordingTimerRef.current) {\n      clearInterval(recordingTimerRef.current);\n      recordingTimerRef.current = null;\n    }\n  }, []);\n\n  const formatTime = useCallback((seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n\n  // Function to create new test\n  const createNewTest = (criteria = {}) => {\n    let test;\n    if (criteria.mode === 'custom' && Object.keys(criteria).length > 1) {\n      test = createCustomTest(criteria);\n    } else {\n      test = createRandomTest();\n    }\n\n    setCurrentTest(test);\n    setAnswers(Array(test.questions.length).fill(\"\"));\n    setCurrentQuestionIndex(0);\n    setFeedbacks(null);\n    setTestSummary(null);\n    setShowResults(false);\n    setError(null);\n    setRecordingTime(0);\n    setAudioFeatures({});\n    setRealTimeFeatures({ pitch: 0, intensity: 0, stressPattern: '' });\n\n    if (pronunciationAnalyzer) {\n      pronunciationAnalyzer.reset();\n    }\n  };\n\n  // FIXED: Enhanced recording with pronunciation analysis and proper AudioContext initialization\n  const toggleRecording = async () => {\n    if (recording) {\n      // Stop recording\n      recognitionRef.current?.stop();\n      if (pronunciationAnalyzer && isAnalyzingPronunciation) {\n        pronunciationAnalyzer.stopAnalysis();\n        const features = pronunciationAnalyzer.getFeatures();\n        setAudioFeatures(prev => ({ ...prev, [currentQuestionIndex]: features }));\n        setIsAnalyzingPronunciation(false);\n      }\n      if (currentStreamRef.current) {\n        currentStreamRef.current.getTracks().forEach(track => track.stop());\n      }\n      return;\n    }\n\n    // FIXED: Initialize AudioContext on first user interaction\n    if (pronunciationAnalyzer && !pronunciationAnalyzer.audioContext) {\n      try {\n        const initialized = await pronunciationAnalyzer.initialize();\n        if (!initialized) {\n          console.warn('AudioContext initialization failed, continuing without pronunciation analysis');\n        }\n      } catch (error) {\n        console.warn('AudioContext initialization error:', error);\n      }\n    }\n\n    // Check browser support\n    if (!(\"webkitSpeechRecognition\" in window) && !(\"SpeechRecognition\" in window)) {\n      setError(\"Speech recognition is not supported in this browser. Please use Chrome or Edge.\");\n      return;\n    }\n\n    try {\n      // Get microphone stream\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: false,\n          sampleRate: 44100\n        }\n      });\n      currentStreamRef.current = stream;\n\n      // Start pronunciation analysis\n      if (pronunciationAnalyzer && pronunciationAnalyzer.audioContext) {\n        try {\n          pronunciationAnalyzer.reset();\n          await pronunciationAnalyzer.startAnalysis(stream);\n          setIsAnalyzingPronunciation(true);\n        } catch (analysisError) {\n          console.warn('Pronunciation analysis failed:', analysisError);\n        }\n      }\n\n      // Setup speech recognition\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      recognition.lang = \"en-US\";\n      recognition.continuous = true;\n      recognition.interimResults = false;\n      recognition.maxAlternatives = 1;\n\n      recognition.onstart = () => {\n        setRecording(true);\n        setError(null);\n        startRecordingTimer();\n      };\n\n      recognition.onresult = (event) => {\n        const speechText = Array.from(event.results)\n          .map((result) => result[0].transcript)\n          .join(\" \");\n\n        setAnswers((prev) => {\n          const newAnswers = [...prev];\n          newAnswers[currentQuestionIndex] = speechText.trim();\n          return newAnswers;\n        });\n      };\n\n      recognition.onend = () => {\n        setRecording(false);\n        stopRecordingTimer();\n      };\n\n      recognition.onerror = (event) => {\n        console.error(\"Speech recognition error:\", event.error);\n        setError(`⚠️ Speech recognition error: ${event.error}. Please try again.`);\n        setRecording(false);\n        stopRecordingTimer();\n        setIsAnalyzingPronunciation(false);\n      };\n\n      recognitionRef.current = recognition;\n      recognition.start();\n\n    } catch (err) {\n      setError(\"⚠️ Failed to access microphone. Please check your permissions and try again.\");\n      console.error(\"Microphone access error:\", err);\n    }\n  };\n\n  // Navigation functions\n  const goNext = () => {\n    if (currentQuestionIndex < currentTest.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n\n  const goPrev = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n\n  // Enhanced submit with pronunciation analysis\n  const submitTest = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"/api/analyze-batch\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          testId: currentTest.testId,\n          questions: currentTest.questions,\n          answers,\n          sampleAnswers: currentTest.sampleAnswers,\n          audioFeatures // Include pronunciation features\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setFeedbacks(data.feedbacks);\n      setTestSummary(data.testSummary);\n      setShowResults(true);\n    } catch (err) {\n      console.error(\"Analysis error:\", err);\n      setError(\"⚠️ Error during analysis. Please check your connection and try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset function\n  const resetTest = () => {\n    createNewTest({ mode: 'random' });\n  };\n\n  // Band color function\n  const getBandColor = (band) => {\n    if (band >= 8.5) return \"#2e7d32\"; // Dark green\n    if (band >= 7) return \"#388e3c\"; // Green\n    if (band >= 6.5) return \"#689f38\"; // Light green\n    if (band >= 6) return \"#afb42b\"; // Yellow green\n    if (band >= 5.5) return \"#f57f17\"; // Dark yellow\n    if (band >= 5) return \"#ff8f00\"; // Orange\n    if (band >= 4) return \"#f57c00\"; // Dark orange\n    return \"#d32f2f\"; // Red\n  };\n\n  // Get available categories for custom test creation\n  const getAvailableCategories = () => {\n    const categories = [...new Set(questionBank.map(q => q.category))];\n    return categories;\n  };\n\n  // FIXED: Add loading state check\n  if (!isComponentReady) {\n    return (\n      <div className=\"speech-evaluator\">\n        <div className=\"loading-container\">\n          <h2>🎤 Initializing IELTS Speech Evaluator...</h2>\n          <p>Setting up audio analysis and question bank...</p>\n          <div className=\"loading-spinner\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (initializationError) {\n    return (\n      <div className=\"speech-evaluator\">\n        <div className=\"error-container\">\n          <h2>⚠️ Initialization Error</h2>\n          <p>{initializationError}</p>\n          <button onClick={() => window.location.reload()}>Refresh Page</button>\n        </div>\n      </div>\n    );\n  }\n\n  // Loading state for when component is initializing\n  if (!currentTest) {\n    return (\n      <div className=\"speech-evaluator\">\n        <div className=\"loading-container\">\n          <h2>🎤 Initializing IELTS Speech Evaluator...</h2>\n          <p>Loading {questionBank.length} questions from question bank...</p>\n          <div className=\"loading-spinner\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"speech-evaluator\">\n     \n      {!showResults && (\n        <>\n          <div className=\"test-info\">\n            <h2>{currentTest.title}</h2>\n            <p>You've answered {answers.filter(a => a.trim().length > 0).length} of {currentTest.questions.length} questions.</p>\n          </div>\n\n          <div className=\"question-section\">\n            <div className=\"question-header\">\n              <span className=\"question-number\">Question {currentQuestionIndex + 1} of {currentTest.questions.length}</span>\n              <span className=\"difficulty-badge\">{currentTest.difficulties[currentQuestionIndex]}</span>\n            </div>\n            \n            <div className=\"question-text\">\n              <h3>{currentTest.questions[currentQuestionIndex]}</h3>\n              <p className=\"category-tag\">Category: {currentTest.categories[currentQuestionIndex]}</p>\n            </div>\n\n            <div className=\"recording-controls\">\n              <button\n                onClick={toggleRecording}\n                className={`record-button ${recording ? 'recording' : ''}`}\n                disabled={loading}\n              >\n                {recording ? `🔴 Stop Recording (${formatTime(recordingTime)})` : '🎤 Start Recording'}\n              </button>\n\n              {isAnalyzingPronunciation && (\n                <div className=\"realtime-analysis\">\n                  <div className=\"analysis-item\">\n                    <span>Pitch: {realTimeFeatures.pitch} Hz</span>\n                  </div>\n                  <div className=\"analysis-item\">\n                    <span>Intensity: {realTimeFeatures.intensity}%</span>\n                  </div>\n                  <div className=\"analysis-item\">\n                    <span>Pattern: {realTimeFeatures.stressPattern}</span>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"answer-display\">\n              <h4>Your Answer:</h4>\n              <textarea\n                value={answers[currentQuestionIndex] || ''}\n                onChange={(e) => {\n                  const newAnswers = [...answers];\n                  newAnswers[currentQuestionIndex] = e.target.value;\n                  setAnswers(newAnswers);\n                }}\n                placeholder=\"Your spoken answer will appear here, or you can type directly...\"\n                rows={4}\n              />\n            </div>\n          </div>\n\n          <div className=\"navigation-controls\">\n            <button\n              onClick={goPrev}\n              disabled={currentQuestionIndex === 0}\n              className=\"nav-button\"\n            >\n              ← Previous\n            </button>\n\n            <button\n              onClick={goNext}\n              disabled={currentQuestionIndex === currentTest.questions.length - 1}\n              className=\"nav-button\"\n            >\n              Next →\n            </button>\n          </div>\n\n          <div className=\"test-controls\">\n            <button\n              onClick={submitTest}\n              disabled={loading || answers.filter(a => a.trim()).length === 0}\n              className=\"submit-button\"\n            >\n              {loading ? '🔄 Analyzing...' : '📊 Submit Test for Analysis'}\n            </button>\n\n            <button\n              onClick={resetTest}\n              className=\"reset-button\"\n            >\n              🔄 New Test\n            </button>\n          </div>\n        </>\n      )}\n\n      {showResults && feedbacks && testSummary && (\n        <div className=\"results-section\">\n          <div className=\"results-header\">\n            <h2>📊 Test Results</h2>\n            <div className=\"overall-score\">\n              <span className=\"score-label\">Overall Band Score:</span>\n              <span\n                className=\"score-value\"\n                style={{ color: getBandColor(testSummary.overall) }}\n              >\n                {testSummary.overall}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"band-scores\">\n            <div className=\"score-item\">\n              <span>Fluency & Coherence:</span>\n              <span style={{ color: getBandColor(testSummary.fluency) }}>\n                {testSummary.fluency}\n              </span>\n            </div>\n            <div className=\"score-item\">\n              <span>Lexical Resource:</span>\n              <span style={{ color: getBandColor(testSummary.lexical) }}>\n                {testSummary.lexical}\n              </span>\n            </div>\n            <div className=\"score-item\">\n              <span>Grammatical Range:</span>\n              <span style={{ color: getBandColor(testSummary.grammar) }}>\n                {testSummary.grammar}\n              </span>\n            </div>\n            <div className=\"score-item\">\n              <span>Pronunciation:</span>\n              <span style={{ color: getBandColor(testSummary.pronunciation) }}>\n                {testSummary.pronunciation}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"detailed-feedback\">\n            {feedbacks.map((feedback, index) => (\n              <div key={index} className=\"feedback-item\">\n                <div dangerouslySetInnerHTML={{ __html: feedback.feedback.replace(/\\n/g, '<br>') }} />\n              </div>\n            ))}\n          </div>\n\n          <div className=\"results-actions\">\n            <button onClick={resetTest} className=\"new-test-button\">\n              🆕 Take Another Test\n            </button>\n          </div>\n        </div>\n      )}\n\n      {error && (\n        <div className=\"error-message\">\n          <p>{error}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SpeechEvaluator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}