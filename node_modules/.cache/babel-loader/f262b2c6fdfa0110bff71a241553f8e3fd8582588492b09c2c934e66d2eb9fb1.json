{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\ielts-speech-evaluator\\\\src\\\\components\\\\SpeechEvaluator.jsx\",\n  _s = $RefreshSig$();\n// Enhanced SpeechEvaluator.jsx – Auto-Start Recording, Auto-Advance, Hide Nav Buttons\n\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport questionBank from \"../data/questions-corrected\";\nimport \"./SpeechEvaluator.css\";\nimport \"./auto-record-styles.css\";\n\n// Build authentic IELTS test structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createIELTSTest = () => {\n  const topics = [...questionBank.part1Topics].sort(() => Math.random() - 0.5);\n  const [first, second] = topics;\n  const introQs = [...first.questions].sort(() => Math.random() - 0.5).slice(0, 4);\n  const secondQs = [...second.questions].sort(() => Math.random() - 0.5).slice(0, Math.random() > 0.5 ? 3 : 4);\n  const part1Qs = [...introQs.map(q => ({\n    ...q,\n    topicName: first.topicName,\n    part: 1,\n    expectedDuration: 30\n  })), ...secondQs.map(q => ({\n    ...q,\n    topicName: second.topicName,\n    part: 1,\n    expectedDuration: 30\n  }))];\n  const cue = questionBank.part2CueCards[Math.floor(Math.random() * questionBank.part2CueCards.length)];\n  const part2Q = {\n    ...cue,\n    part: 2,\n    expectedDuration: 120,\n    preparationTime: 60\n  };\n  const disc = questionBank.part3Discussions.find(d => d.relatedToPart2 === cue.id) || {\n    questions: []\n  };\n  const part3Qs = [...disc.questions].sort(() => Math.random() - 0.5).slice(0, Math.floor(Math.random() * 3) + 4).map(q => ({\n    ...q,\n    part: 3,\n    expectedDuration: 60\n  }));\n  return {\n    testId: `ielts_test_${Date.now()}`,\n    title: `IELTS Speaking Test – ${new Date().toLocaleDateString()}`,\n    testStructure: {\n      part1: {\n        name: \"Part 1\",\n        duration: \"4–5 min\",\n        questions: part1Qs,\n        topics: [first.topicName, second.topicName]\n      },\n      part2: {\n        name: \"Part 2\",\n        duration: \"3–4 min\",\n        question: part2Q,\n        cueCard: cue.cueCard\n      },\n      part3: {\n        name: \"Part 3\",\n        duration: \"4–5 min\",\n        questions: part3Qs\n      }\n    },\n    allQuestions: [...part1Qs.map(q => ({\n      prompt: q.prompt,\n      ...q\n    })), {\n      prompt: part2Q.cueCard.mainPrompt,\n      ...part2Q\n    }, ...part3Qs.map(q => ({\n      prompt: q.prompt,\n      ...q\n    }))],\n    totalQuestions: part1Qs.length + 1 + part3Qs.length\n  };\n};\n\n// Pronunciation analyzer (unchanged)\nclass SimplePronunciationAnalyzer {\n  // ... same implementation ...\n}\nexport default function SpeechEvaluator() {\n  _s();\n  const [currentTest, setCurrentTest] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [recording, setRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [preparationTime, setPreparationTime] = useState(0);\n  const [isPreparingPart2, setIsPreparingPart2] = useState(false);\n  const [autoStartRecording, setAutoStartRecording] = useState(false);\n  const recognitionRef = useRef(null);\n  const recordingTimerRef = useRef(null);\n  const preparationTimerRef = useRef(null);\n  const currentStreamRef = useRef(null);\n  const pronunciationAnalyzerRef = useRef(null);\n\n  // Initialize test and analyzer\n  useEffect(() => {\n    const init = () => {\n      const test = createIELTSTest();\n      setCurrentTest(test);\n      setAnswers(Array(test.totalQuestions).fill(\"\"));\n      pronunciationAnalyzerRef.current = new SimplePronunciationAnalyzer();\n    };\n    init();\n  }, []);\n\n  // Auto-start after preparation\n  useEffect(() => {\n    if (autoStartRecording && !isPreparingPart2 && preparationTime === 0) {\n      const t = setTimeout(() => {\n        startRecording();\n        setAutoStartRecording(false);\n      }, 500);\n      return () => clearTimeout(t);\n    }\n  }, [autoStartRecording, isPreparingPart2, preparationTime]);\n  const formatTime = sec => {\n    const m = Math.floor(sec / 60),\n      s = sec % 60;\n    return `${m}:${s.toString().padStart(2, \"0\")}`;\n  };\n\n  // Part 2 preparation\n  const startPart2Preparation = () => {\n    setIsPreparingPart2(true);\n    setPreparationTime(60);\n    setAutoStartRecording(true);\n    preparationTimerRef.current = setInterval(() => {\n      setPreparationTime(t => {\n        if (t <= 1) {\n          clearInterval(preparationTimerRef.current);\n          setIsPreparingPart2(false);\n          return 0;\n        }\n        return t - 1;\n      });\n    }, 1000);\n  };\n\n  // Recording control\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      currentStreamRef.current = stream;\n      await pronunciationAnalyzerRef.current.initialize();\n      await pronunciationAnalyzerRef.current.startAnalysis(stream);\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      recognition.lang = \"en-US\";\n      recognition.continuous = true;\n      recognition.interimResults = false;\n      recognition.onstart = () => {\n        setRecording(true);\n        setRecordingTime(0);\n        recordingTimerRef.current = setInterval(() => setRecordingTime(t => t + 1), 1000);\n      };\n      recognition.onresult = e => {\n        const text = Array.from(e.results).map(r => r[0].transcript).join(\" \");\n        setAnswers(a => {\n          a[currentQuestionIndex] = text.trim();\n          return [...a];\n        });\n      };\n      recognition.onend = stopRecording;\n      recognition.onerror = stopRecording;\n      recognitionRef.current = recognition;\n      recognition.start();\n    } catch (err) {\n      console.error(\"Recording error:\", err);\n    }\n  };\n  const stopRecording = () => {\n    var _recognitionRef$curre, _pronunciationAnalyze, _currentStreamRef$cur;\n    (_recognitionRef$curre = recognitionRef.current) === null || _recognitionRef$curre === void 0 ? void 0 : _recognitionRef$curre.stop();\n    (_pronunciationAnalyze = pronunciationAnalyzerRef.current) === null || _pronunciationAnalyze === void 0 ? void 0 : _pronunciationAnalyze.stopAnalysis();\n    (_currentStreamRef$cur = currentStreamRef.current) === null || _currentStreamRef$cur === void 0 ? void 0 : _currentStreamRef$cur.getTracks().forEach(t => t.stop());\n    setRecording(false);\n    clearInterval(recordingTimerRef.current);\n    // Auto-advance to next question\n    setTimeout(() => {\n      setCurrentQuestionIndex(i => Math.min(i + 1, currentTest.totalQuestions - 1));\n    }, 200);\n  };\n  if (!currentTest) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 28\n  }, this);\n  const part1Len = currentTest.testStructure.part1.questions.length;\n  const part2Index = part1Len;\n  const part = currentQuestionIndex < part1Len ? 1 : currentQuestionIndex === part2Index ? 2 : 3;\n  const currentQuestion = currentTest.allQuestions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"speech-evaluator\",\n    children: [part === 2 && !isPreparingPart2 && preparationTime === 0 && !recording && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"part2-preparation-intro\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83D\\uDCDD Part 2: Preparation Phase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startPart2Preparation,\n        className: \"btn-primary\",\n        children: \"Start Preparation (1 minute)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this), part === 2 && (isPreparingPart2 || preparationTime === 0) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cue-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: currentQuestion.cueCard.mainPrompt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: currentQuestion.cueCard.bulletPoints.map((pt, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: pt\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), isPreparingPart2 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preparation-phase\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Time Remaining: \", formatTime(preparationTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this), part !== 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-section\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion.prompt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this), !recording && part !== 2 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      className: \"record-button\",\n      children: \"\\uD83C\\uDFA4 Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this), recording && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auto-recording-status\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u25CF Recording: \", formatTime(recordingTime)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopRecording,\n        className: \"record-button recording\",\n        children: \"\\u23F9\\uFE0F Stop Recording\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"answer-section\",\n      value: answers[currentQuestionIndex] || \"\",\n      onChange: e => setAnswers(a => {\n        a[currentQuestionIndex] = e.target.value;\n        return [...a];\n      }),\n      disabled: recording,\n      placeholder: \"Your response...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setCurrentQuestionIndex(i => i - 1),\n          children: \"\\u2190 Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setCurrentQuestionIndex(i => i + 1),\n          children: \"Next \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n}\n_s(SpeechEvaluator, \"PGFAwt4nWprzOaMlIGfr2EMPgak=\");\n_c = SpeechEvaluator;\nvar _c;\n$RefreshReg$(_c, \"SpeechEvaluator\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","questionBank","jsxDEV","_jsxDEV","createIELTSTest","topics","part1Topics","sort","Math","random","first","second","introQs","questions","slice","secondQs","part1Qs","map","q","topicName","part","expectedDuration","cue","part2CueCards","floor","length","part2Q","preparationTime","disc","part3Discussions","find","d","relatedToPart2","id","part3Qs","testId","Date","now","title","toLocaleDateString","testStructure","part1","name","duration","part2","question","cueCard","part3","allQuestions","prompt","mainPrompt","totalQuestions","SimplePronunciationAnalyzer","SpeechEvaluator","_s","currentTest","setCurrentTest","currentQuestionIndex","setCurrentQuestionIndex","recording","setRecording","recordingTime","setRecordingTime","answers","setAnswers","setPreparationTime","isPreparingPart2","setIsPreparingPart2","autoStartRecording","setAutoStartRecording","recognitionRef","recordingTimerRef","preparationTimerRef","currentStreamRef","pronunciationAnalyzerRef","init","test","Array","fill","current","t","setTimeout","startRecording","clearTimeout","formatTime","sec","m","s","toString","padStart","startPart2Preparation","setInterval","clearInterval","stream","navigator","mediaDevices","getUserMedia","audio","initialize","startAnalysis","SpeechRecognition","window","webkitSpeechRecognition","recognition","lang","continuous","interimResults","onstart","onresult","e","text","from","results","r","transcript","join","a","trim","onend","stopRecording","onerror","start","err","console","error","_recognitionRef$curre","_pronunciationAnalyze","_currentStreamRef$cur","stop","stopAnalysis","getTracks","forEach","i","min","children","fileName","_jsxFileName","lineNumber","columnNumber","part1Len","part2Index","currentQuestion","className","onClick","bulletPoints","pt","idx","value","onChange","target","disabled","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/ielts-speech-evaluator/src/components/SpeechEvaluator.jsx"],"sourcesContent":["// Enhanced SpeechEvaluator.jsx – Auto-Start Recording, Auto-Advance, Hide Nav Buttons\n\nimport React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport questionBank from \"../data/questions-corrected\";\nimport \"./SpeechEvaluator.css\";\nimport \"./auto-record-styles.css\";\n\n// Build authentic IELTS test structure\nconst createIELTSTest = () => {\n  const topics = [...questionBank.part1Topics].sort(() => Math.random() - 0.5);\n  const [first, second] = topics;\n  const introQs = [...first.questions].sort(() => Math.random() - 0.5).slice(0, 4);\n  const secondQs = [...second.questions]\n    .sort(() => Math.random() - 0.5)\n    .slice(0, Math.random() > 0.5 ? 3 : 4);\n  const part1Qs = [\n    ...introQs.map((q) => ({ ...q, topicName: first.topicName, part: 1, expectedDuration: 30 })),\n    ...secondQs.map((q) => ({ ...q, topicName: second.topicName, part: 1, expectedDuration: 30 })),\n  ];\n\n  const cue =\n    questionBank.part2CueCards[\n      Math.floor(Math.random() * questionBank.part2CueCards.length)\n    ];\n  const part2Q = { ...cue, part: 2, expectedDuration: 120, preparationTime: 60 };\n\n  const disc =\n    questionBank.part3Discussions.find((d) => d.relatedToPart2 === cue.id) || { questions: [] };\n  const part3Qs = [...disc.questions]\n    .sort(() => Math.random() - 0.5)\n    .slice(0, Math.floor(Math.random() * 3) + 4)\n    .map((q) => ({ ...q, part: 3, expectedDuration: 60 }));\n\n  return {\n    testId: `ielts_test_${Date.now()}`,\n    title: `IELTS Speaking Test – ${new Date().toLocaleDateString()}`,\n    testStructure: {\n      part1: { name: \"Part 1\", duration: \"4–5 min\", questions: part1Qs, topics: [first.topicName, second.topicName] },\n      part2: { name: \"Part 2\", duration: \"3–4 min\", question: part2Q, cueCard: cue.cueCard },\n      part3: { name: \"Part 3\", duration: \"4–5 min\", questions: part3Qs },\n    },\n    allQuestions: [\n      ...part1Qs.map((q) => ({ prompt: q.prompt, ...q })),\n      { prompt: part2Q.cueCard.mainPrompt, ...part2Q },\n      ...part3Qs.map((q) => ({ prompt: q.prompt, ...q })),\n    ],\n    totalQuestions: part1Qs.length + 1 + part3Qs.length,\n  };\n};\n\n// Pronunciation analyzer (unchanged)\nclass SimplePronunciationAnalyzer {\n  // ... same implementation ...\n}\n\nexport default function SpeechEvaluator() {\n  const [currentTest, setCurrentTest] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [recording, setRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [preparationTime, setPreparationTime] = useState(0);\n  const [isPreparingPart2, setIsPreparingPart2] = useState(false);\n  const [autoStartRecording, setAutoStartRecording] = useState(false);\n\n  const recognitionRef = useRef(null);\n  const recordingTimerRef = useRef(null);\n  const preparationTimerRef = useRef(null);\n  const currentStreamRef = useRef(null);\n  const pronunciationAnalyzerRef = useRef(null);\n\n  // Initialize test and analyzer\n  useEffect(() => {\n    const init = () => {\n      const test = createIELTSTest();\n      setCurrentTest(test);\n      setAnswers(Array(test.totalQuestions).fill(\"\"));\n      pronunciationAnalyzerRef.current = new SimplePronunciationAnalyzer();\n    };\n    init();\n  }, []);\n\n  // Auto-start after preparation\n  useEffect(() => {\n    if (autoStartRecording && !isPreparingPart2 && preparationTime === 0) {\n      const t = setTimeout(() => {\n        startRecording();\n        setAutoStartRecording(false);\n      }, 500);\n      return () => clearTimeout(t);\n    }\n  }, [autoStartRecording, isPreparingPart2, preparationTime]);\n\n  const formatTime = (sec) => {\n    const m = Math.floor(sec / 60),\n      s = sec % 60;\n    return `${m}:${s.toString().padStart(2, \"0\")}`;\n  };\n\n  // Part 2 preparation\n  const startPart2Preparation = () => {\n    setIsPreparingPart2(true);\n    setPreparationTime(60);\n    setAutoStartRecording(true);\n    preparationTimerRef.current = setInterval(() => {\n      setPreparationTime((t) => {\n        if (t <= 1) {\n          clearInterval(preparationTimerRef.current);\n          setIsPreparingPart2(false);\n          return 0;\n        }\n        return t - 1;\n      });\n    }, 1000);\n  };\n\n  // Recording control\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      currentStreamRef.current = stream;\n      await pronunciationAnalyzerRef.current.initialize();\n      await pronunciationAnalyzerRef.current.startAnalysis(stream);\n\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      const recognition = new SpeechRecognition();\n      recognition.lang = \"en-US\";\n      recognition.continuous = true;\n      recognition.interimResults = false;\n\n      recognition.onstart = () => {\n        setRecording(true);\n        setRecordingTime(0);\n        recordingTimerRef.current = setInterval(\n          () => setRecordingTime((t) => t + 1),\n          1000\n        );\n      };\n      recognition.onresult = (e) => {\n        const text = Array.from(e.results)\n          .map((r) => r[0].transcript)\n          .join(\" \");\n        setAnswers((a) => {\n          a[currentQuestionIndex] = text.trim();\n          return [...a];\n        });\n      };\n      recognition.onend = stopRecording;\n      recognition.onerror = stopRecording;\n\n      recognitionRef.current = recognition;\n      recognition.start();\n    } catch (err) {\n      console.error(\"Recording error:\", err);\n    }\n  };\n\n  const stopRecording = () => {\n    recognitionRef.current?.stop();\n    pronunciationAnalyzerRef.current?.stopAnalysis();\n    currentStreamRef.current?.getTracks().forEach((t) => t.stop());\n    setRecording(false);\n    clearInterval(recordingTimerRef.current);\n    // Auto-advance to next question\n    setTimeout(() => {\n      setCurrentQuestionIndex((i) => Math.min(i + 1, currentTest.totalQuestions - 1));\n    }, 200);\n  };\n\n  if (!currentTest) return <div>Loading...</div>;\n\n  const part1Len = currentTest.testStructure.part1.questions.length;\n  const part2Index = part1Len;\n  const part =\n    currentQuestionIndex < part1Len\n      ? 1\n      : currentQuestionIndex === part2Index\n      ? 2\n      : 3;\n  const currentQuestion = currentTest.allQuestions[currentQuestionIndex];\n\n  return (\n    <div className=\"speech-evaluator\">\n      {/* Part 2 Preparation Intro */}\n      {part === 2 && !isPreparingPart2 && preparationTime === 0 && !recording && (\n        <div className=\"part2-preparation-intro\">\n          <h3>📝 Part 2: Preparation Phase</h3>\n          <button onClick={startPart2Preparation} className=\"btn-primary\">\n            Start Preparation (1 minute)\n          </button>\n        </div>\n      )}\n\n      {/* Part 2 Cue Card & Timer */}\n      {part === 2 && (isPreparingPart2 || preparationTime === 0) && (\n        <div className=\"question-section\">\n          <div className=\"cue-card\">\n            <h3>{currentQuestion.cueCard.mainPrompt}</h3>\n            <ul>\n              {currentQuestion.cueCard.bulletPoints.map((pt, idx) => (\n                <li key={idx}>{pt}</li>\n              ))}\n            </ul>\n          </div>\n          {isPreparingPart2 && (\n            <div className=\"preparation-phase\">\n              <h4>Time Remaining: {formatTime(preparationTime)}</h4>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Part 1 & 3 Question */}\n      {part !== 2 && (\n        <div className=\"question-section\">\n          <h3>{currentQuestion.prompt}</h3>\n        </div>\n      )}\n\n      {/* Recording Controls */}\n      {!recording && part !== 2 && (\n        <button onClick={startRecording} className=\"record-button\">\n          🎤 Start Recording\n        </button>\n      )}\n      {recording && (\n        <div className=\"auto-recording-status\">\n          <span>● Recording: {formatTime(recordingTime)}</span>\n          <button onClick={stopRecording} className=\"record-button recording\">\n            ⏹️ Stop Recording\n          </button>\n        </div>\n      )}\n\n      {/* Answer Textarea */}\n      <textarea\n        className=\"answer-section\"\n        value={answers[currentQuestionIndex] || \"\"}\n        onChange={(e) =>\n          setAnswers((a) => {\n            a[currentQuestionIndex] = e.target.value;\n            return [...a];\n          })\n        }\n        disabled={recording}\n        placeholder=\"Your response...\"\n      />\n\n      {/* Navigation (hidden via CSS) */}\n      <div className=\"navigation-section\">\n        <div className=\"nav-buttons\">\n          <button onClick={() => setCurrentQuestionIndex((i) => i - 1)}>← Previous</button>\n          <button onClick={() => setCurrentQuestionIndex((i) => i + 1)}>Next →</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAOC,YAAY,MAAM,6BAA6B;AACtD,OAAO,uBAAuB;AAC9B,OAAO,0BAA0B;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC5B,MAAMC,MAAM,GAAG,CAAC,GAAGJ,YAAY,CAACK,WAAW,CAAC,CAACC,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;EAC5E,MAAM,CAACC,KAAK,EAAEC,MAAM,CAAC,GAAGN,MAAM;EAC9B,MAAMO,OAAO,GAAG,CAAC,GAAGF,KAAK,CAACG,SAAS,CAAC,CAACN,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAChF,MAAMC,QAAQ,GAAG,CAAC,GAAGJ,MAAM,CAACE,SAAS,CAAC,CACnCN,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAC/BK,KAAK,CAAC,CAAC,EAAEN,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;EACxC,MAAMO,OAAO,GAAG,CACd,GAAGJ,OAAO,CAACK,GAAG,CAAEC,CAAC,KAAM;IAAE,GAAGA,CAAC;IAAEC,SAAS,EAAET,KAAK,CAACS,SAAS;IAAEC,IAAI,EAAE,CAAC;IAAEC,gBAAgB,EAAE;EAAG,CAAC,CAAC,CAAC,EAC5F,GAAGN,QAAQ,CAACE,GAAG,CAAEC,CAAC,KAAM;IAAE,GAAGA,CAAC;IAAEC,SAAS,EAAER,MAAM,CAACQ,SAAS;IAAEC,IAAI,EAAE,CAAC;IAAEC,gBAAgB,EAAE;EAAG,CAAC,CAAC,CAAC,CAC/F;EAED,MAAMC,GAAG,GACPrB,YAAY,CAACsB,aAAa,CACxBf,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGR,YAAY,CAACsB,aAAa,CAACE,MAAM,CAAC,CAC9D;EACH,MAAMC,MAAM,GAAG;IAAE,GAAGJ,GAAG;IAAEF,IAAI,EAAE,CAAC;IAAEC,gBAAgB,EAAE,GAAG;IAAEM,eAAe,EAAE;EAAG,CAAC;EAE9E,MAAMC,IAAI,GACR3B,YAAY,CAAC4B,gBAAgB,CAACC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,cAAc,KAAKV,GAAG,CAACW,EAAE,CAAC,IAAI;IAAEpB,SAAS,EAAE;EAAG,CAAC;EAC7F,MAAMqB,OAAO,GAAG,CAAC,GAAGN,IAAI,CAACf,SAAS,CAAC,CAChCN,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAC/BK,KAAK,CAAC,CAAC,EAAEN,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAC3CQ,GAAG,CAAEC,CAAC,KAAM;IAAE,GAAGA,CAAC;IAAEE,IAAI,EAAE,CAAC;IAAEC,gBAAgB,EAAE;EAAG,CAAC,CAAC,CAAC;EAExD,OAAO;IACLc,MAAM,EAAE,cAAcC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;IAClCC,KAAK,EAAE,yBAAyB,IAAIF,IAAI,CAAC,CAAC,CAACG,kBAAkB,CAAC,CAAC,EAAE;IACjEC,aAAa,EAAE;MACbC,KAAK,EAAE;QAAEC,IAAI,EAAE,QAAQ;QAAEC,QAAQ,EAAE,SAAS;QAAE9B,SAAS,EAAEG,OAAO;QAAEX,MAAM,EAAE,CAACK,KAAK,CAACS,SAAS,EAAER,MAAM,CAACQ,SAAS;MAAE,CAAC;MAC/GyB,KAAK,EAAE;QAAEF,IAAI,EAAE,QAAQ;QAAEC,QAAQ,EAAE,SAAS;QAAEE,QAAQ,EAAEnB,MAAM;QAAEoB,OAAO,EAAExB,GAAG,CAACwB;MAAQ,CAAC;MACtFC,KAAK,EAAE;QAAEL,IAAI,EAAE,QAAQ;QAAEC,QAAQ,EAAE,SAAS;QAAE9B,SAAS,EAAEqB;MAAQ;IACnE,CAAC;IACDc,YAAY,EAAE,CACZ,GAAGhC,OAAO,CAACC,GAAG,CAAEC,CAAC,KAAM;MAAE+B,MAAM,EAAE/B,CAAC,CAAC+B,MAAM;MAAE,GAAG/B;IAAE,CAAC,CAAC,CAAC,EACnD;MAAE+B,MAAM,EAAEvB,MAAM,CAACoB,OAAO,CAACI,UAAU;MAAE,GAAGxB;IAAO,CAAC,EAChD,GAAGQ,OAAO,CAACjB,GAAG,CAAEC,CAAC,KAAM;MAAE+B,MAAM,EAAE/B,CAAC,CAAC+B,MAAM;MAAE,GAAG/B;IAAE,CAAC,CAAC,CAAC,CACpD;IACDiC,cAAc,EAAEnC,OAAO,CAACS,MAAM,GAAG,CAAC,GAAGS,OAAO,CAACT;EAC/C,CAAC;AACH,CAAC;;AAED;AACA,MAAM2B,2BAA2B,CAAC;EAChC;AAAA;AAGF,eAAe,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACxC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG3D,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAAC4D,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG7D,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAAC8D,SAAS,EAAEC,YAAY,CAAC,GAAG/D,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACgE,aAAa,EAAEC,gBAAgB,CAAC,GAAGjE,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACkE,OAAO,EAAEC,UAAU,CAAC,GAAGnE,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC8B,eAAe,EAAEsC,kBAAkB,CAAC,GAAGpE,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACqE,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtE,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACuE,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGxE,QAAQ,CAAC,KAAK,CAAC;EAEnE,MAAMyE,cAAc,GAAGxE,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMyE,iBAAiB,GAAGzE,MAAM,CAAC,IAAI,CAAC;EACtC,MAAM0E,mBAAmB,GAAG1E,MAAM,CAAC,IAAI,CAAC;EACxC,MAAM2E,gBAAgB,GAAG3E,MAAM,CAAC,IAAI,CAAC;EACrC,MAAM4E,wBAAwB,GAAG5E,MAAM,CAAC,IAAI,CAAC;;EAE7C;EACAC,SAAS,CAAC,MAAM;IACd,MAAM4E,IAAI,GAAGA,CAAA,KAAM;MACjB,MAAMC,IAAI,GAAGxE,eAAe,CAAC,CAAC;MAC9BoD,cAAc,CAACoB,IAAI,CAAC;MACpBZ,UAAU,CAACa,KAAK,CAACD,IAAI,CAACzB,cAAc,CAAC,CAAC2B,IAAI,CAAC,EAAE,CAAC,CAAC;MAC/CJ,wBAAwB,CAACK,OAAO,GAAG,IAAI3B,2BAA2B,CAAC,CAAC;IACtE,CAAC;IACDuB,IAAI,CAAC,CAAC;EACR,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA5E,SAAS,CAAC,MAAM;IACd,IAAIqE,kBAAkB,IAAI,CAACF,gBAAgB,IAAIvC,eAAe,KAAK,CAAC,EAAE;MACpE,MAAMqD,CAAC,GAAGC,UAAU,CAAC,MAAM;QACzBC,cAAc,CAAC,CAAC;QAChBb,qBAAqB,CAAC,KAAK,CAAC;MAC9B,CAAC,EAAE,GAAG,CAAC;MACP,OAAO,MAAMc,YAAY,CAACH,CAAC,CAAC;IAC9B;EACF,CAAC,EAAE,CAACZ,kBAAkB,EAAEF,gBAAgB,EAAEvC,eAAe,CAAC,CAAC;EAE3D,MAAMyD,UAAU,GAAIC,GAAG,IAAK;IAC1B,MAAMC,CAAC,GAAG9E,IAAI,CAACgB,KAAK,CAAC6D,GAAG,GAAG,EAAE,CAAC;MAC5BE,CAAC,GAAGF,GAAG,GAAG,EAAE;IACd,OAAO,GAAGC,CAAC,IAAIC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EAChD,CAAC;;EAED;EACA,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;IAClCvB,mBAAmB,CAAC,IAAI,CAAC;IACzBF,kBAAkB,CAAC,EAAE,CAAC;IACtBI,qBAAqB,CAAC,IAAI,CAAC;IAC3BG,mBAAmB,CAACO,OAAO,GAAGY,WAAW,CAAC,MAAM;MAC9C1B,kBAAkB,CAAEe,CAAC,IAAK;QACxB,IAAIA,CAAC,IAAI,CAAC,EAAE;UACVY,aAAa,CAACpB,mBAAmB,CAACO,OAAO,CAAC;UAC1CZ,mBAAmB,CAAC,KAAK,CAAC;UAC1B,OAAO,CAAC;QACV;QACA,OAAOa,CAAC,GAAG,CAAC;MACd,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;;EAED;EACA,MAAME,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMW,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACzExB,gBAAgB,CAACM,OAAO,GAAGc,MAAM;MACjC,MAAMnB,wBAAwB,CAACK,OAAO,CAACmB,UAAU,CAAC,CAAC;MACnD,MAAMxB,wBAAwB,CAACK,OAAO,CAACoB,aAAa,CAACN,MAAM,CAAC;MAE5D,MAAMO,iBAAiB,GAAGC,MAAM,CAACD,iBAAiB,IAAIC,MAAM,CAACC,uBAAuB;MACpF,MAAMC,WAAW,GAAG,IAAIH,iBAAiB,CAAC,CAAC;MAC3CG,WAAW,CAACC,IAAI,GAAG,OAAO;MAC1BD,WAAW,CAACE,UAAU,GAAG,IAAI;MAC7BF,WAAW,CAACG,cAAc,GAAG,KAAK;MAElCH,WAAW,CAACI,OAAO,GAAG,MAAM;QAC1B/C,YAAY,CAAC,IAAI,CAAC;QAClBE,gBAAgB,CAAC,CAAC,CAAC;QACnBS,iBAAiB,CAACQ,OAAO,GAAGY,WAAW,CACrC,MAAM7B,gBAAgB,CAAEkB,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAC,EACpC,IACF,CAAC;MACH,CAAC;MACDuB,WAAW,CAACK,QAAQ,GAAIC,CAAC,IAAK;QAC5B,MAAMC,IAAI,GAAGjC,KAAK,CAACkC,IAAI,CAACF,CAAC,CAACG,OAAO,CAAC,CAC/B/F,GAAG,CAAEgG,CAAC,IAAKA,CAAC,CAAC,CAAC,CAAC,CAACC,UAAU,CAAC,CAC3BC,IAAI,CAAC,GAAG,CAAC;QACZnD,UAAU,CAAEoD,CAAC,IAAK;UAChBA,CAAC,CAAC3D,oBAAoB,CAAC,GAAGqD,IAAI,CAACO,IAAI,CAAC,CAAC;UACrC,OAAO,CAAC,GAAGD,CAAC,CAAC;QACf,CAAC,CAAC;MACJ,CAAC;MACDb,WAAW,CAACe,KAAK,GAAGC,aAAa;MACjChB,WAAW,CAACiB,OAAO,GAAGD,aAAa;MAEnCjD,cAAc,CAACS,OAAO,GAAGwB,WAAW;MACpCA,WAAW,CAACkB,KAAK,CAAC,CAAC;IACrB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEF,GAAG,CAAC;IACxC;EACF,CAAC;EAED,MAAMH,aAAa,GAAGA,CAAA,KAAM;IAAA,IAAAM,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;IAC1B,CAAAF,qBAAA,GAAAvD,cAAc,CAACS,OAAO,cAAA8C,qBAAA,uBAAtBA,qBAAA,CAAwBG,IAAI,CAAC,CAAC;IAC9B,CAAAF,qBAAA,GAAApD,wBAAwB,CAACK,OAAO,cAAA+C,qBAAA,uBAAhCA,qBAAA,CAAkCG,YAAY,CAAC,CAAC;IAChD,CAAAF,qBAAA,GAAAtD,gBAAgB,CAACM,OAAO,cAAAgD,qBAAA,uBAAxBA,qBAAA,CAA0BG,SAAS,CAAC,CAAC,CAACC,OAAO,CAAEnD,CAAC,IAAKA,CAAC,CAACgD,IAAI,CAAC,CAAC,CAAC;IAC9DpE,YAAY,CAAC,KAAK,CAAC;IACnBgC,aAAa,CAACrB,iBAAiB,CAACQ,OAAO,CAAC;IACxC;IACAE,UAAU,CAAC,MAAM;MACfvB,uBAAuB,CAAE0E,CAAC,IAAK5H,IAAI,CAAC6H,GAAG,CAACD,CAAC,GAAG,CAAC,EAAE7E,WAAW,CAACJ,cAAc,GAAG,CAAC,CAAC,CAAC;IACjF,CAAC,EAAE,GAAG,CAAC;EACT,CAAC;EAED,IAAI,CAACI,WAAW,EAAE,oBAAOpD,OAAA;IAAAmI,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE9C,MAAMC,QAAQ,GAAGpF,WAAW,CAACf,aAAa,CAACC,KAAK,CAAC5B,SAAS,CAACY,MAAM;EACjE,MAAMmH,UAAU,GAAGD,QAAQ;EAC3B,MAAMvH,IAAI,GACRqC,oBAAoB,GAAGkF,QAAQ,GAC3B,CAAC,GACDlF,oBAAoB,KAAKmF,UAAU,GACnC,CAAC,GACD,CAAC;EACP,MAAMC,eAAe,GAAGtF,WAAW,CAACP,YAAY,CAACS,oBAAoB,CAAC;EAEtE,oBACEtD,OAAA;IAAK2I,SAAS,EAAC,kBAAkB;IAAAR,QAAA,GAE9BlH,IAAI,KAAK,CAAC,IAAI,CAAC8C,gBAAgB,IAAIvC,eAAe,KAAK,CAAC,IAAI,CAACgC,SAAS,iBACrExD,OAAA;MAAK2I,SAAS,EAAC,yBAAyB;MAAAR,QAAA,gBACtCnI,OAAA;QAAAmI,QAAA,EAAI;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrCvI,OAAA;QAAQ4I,OAAO,EAAErD,qBAAsB;QAACoD,SAAS,EAAC,aAAa;QAAAR,QAAA,EAAC;MAEhE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN,EAGAtH,IAAI,KAAK,CAAC,KAAK8C,gBAAgB,IAAIvC,eAAe,KAAK,CAAC,CAAC,iBACxDxB,OAAA;MAAK2I,SAAS,EAAC,kBAAkB;MAAAR,QAAA,gBAC/BnI,OAAA;QAAK2I,SAAS,EAAC,UAAU;QAAAR,QAAA,gBACvBnI,OAAA;UAAAmI,QAAA,EAAKO,eAAe,CAAC/F,OAAO,CAACI;QAAU;UAAAqF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC7CvI,OAAA;UAAAmI,QAAA,EACGO,eAAe,CAAC/F,OAAO,CAACkG,YAAY,CAAC/H,GAAG,CAAC,CAACgI,EAAE,EAAEC,GAAG,kBAChD/I,OAAA;YAAAmI,QAAA,EAAeW;UAAE,GAARC,GAAG;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAU,CACvB;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,EACLxE,gBAAgB,iBACf/D,OAAA;QAAK2I,SAAS,EAAC,mBAAmB;QAAAR,QAAA,eAChCnI,OAAA;UAAAmI,QAAA,GAAI,kBAAgB,EAAClD,UAAU,CAACzD,eAAe,CAAC;QAAA;UAAA4G,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN,EAGAtH,IAAI,KAAK,CAAC,iBACTjB,OAAA;MAAK2I,SAAS,EAAC,kBAAkB;MAAAR,QAAA,eAC/BnI,OAAA;QAAAmI,QAAA,EAAKO,eAAe,CAAC5F;MAAM;QAAAsF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CACN,EAGA,CAAC/E,SAAS,IAAIvC,IAAI,KAAK,CAAC,iBACvBjB,OAAA;MAAQ4I,OAAO,EAAE7D,cAAe;MAAC4D,SAAS,EAAC,eAAe;MAAAR,QAAA,EAAC;IAE3D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACT,EACA/E,SAAS,iBACRxD,OAAA;MAAK2I,SAAS,EAAC,uBAAuB;MAAAR,QAAA,gBACpCnI,OAAA;QAAAmI,QAAA,GAAM,oBAAa,EAAClD,UAAU,CAACvB,aAAa,CAAC;MAAA;QAAA0E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACrDvI,OAAA;QAAQ4I,OAAO,EAAExB,aAAc;QAACuB,SAAS,EAAC,yBAAyB;QAAAR,QAAA,EAAC;MAEpE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN,eAGDvI,OAAA;MACE2I,SAAS,EAAC,gBAAgB;MAC1BK,KAAK,EAAEpF,OAAO,CAACN,oBAAoB,CAAC,IAAI,EAAG;MAC3C2F,QAAQ,EAAGvC,CAAC,IACV7C,UAAU,CAAEoD,CAAC,IAAK;QAChBA,CAAC,CAAC3D,oBAAoB,CAAC,GAAGoD,CAAC,CAACwC,MAAM,CAACF,KAAK;QACxC,OAAO,CAAC,GAAG/B,CAAC,CAAC;MACf,CAAC,CACF;MACDkC,QAAQ,EAAE3F,SAAU;MACpB4F,WAAW,EAAC;IAAkB;MAAAhB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,eAGFvI,OAAA;MAAK2I,SAAS,EAAC,oBAAoB;MAAAR,QAAA,eACjCnI,OAAA;QAAK2I,SAAS,EAAC,aAAa;QAAAR,QAAA,gBAC1BnI,OAAA;UAAQ4I,OAAO,EAAEA,CAAA,KAAMrF,uBAAuB,CAAE0E,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAE;UAAAE,QAAA,EAAC;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACjFvI,OAAA;UAAQ4I,OAAO,EAAEA,CAAA,KAAMrF,uBAAuB,CAAE0E,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAE;UAAAE,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1E;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACpF,EAAA,CA1MuBD,eAAe;AAAAmG,EAAA,GAAfnG,eAAe;AAAA,IAAAmG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}